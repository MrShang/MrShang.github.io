<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Architect</title>
  
  <subtitle>The steps you take don&#39;t need to be big. They just need to take you in the right direction.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-14T09:05:19.983Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chris Shang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>B树和B+树</title>
    <link href="http://yoursite.com/2020/04/14/B-Tree-B+Tree/"/>
    <id>http://yoursite.com/2020/04/14/B-Tree-B+Tree/</id>
    <published>2020-04-14T07:45:42.000Z</published>
    <updated>2020-04-14T09:05:19.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="B树的概念"><a href="#B树的概念" class="headerlink" title="B树的概念"></a>B树的概念</h2><p>B树(Balanced Tree, 平衡树)就是B-树, 实际上是对B-Tree的简称.</p><p>B树的特点如下(对于m阶树):</p><ul><li>每个节点最多有m-1个关键字, 即每个节点存储的键值对个数, 如5阶树, 最多只能有4个关键字</li><li>根节点最少可以只有一个关键字</li><li>非根节点至少有m/2个关键字</li><li>每个节点中的关键字都是按照<strong>从小到大</strong>的顺序排列, 每个关键字的左子树中的所有关键字都小于它, 而右子树中的所有关键字都大于它</li><li>所有叶子节点都位于同一层, 即从根节点到每个叶子节点的长度都相同</li><li>每个节点都存有数据, 也就是对应的key和value</li></ul><p><strong>所以, 根节点的关键字数量范围: <code>1 &lt;= k &lt;= m-1</code>, 非根节点的关键字数量范围: <code>m/2 &lt;= k &lt;= m-1</code></strong></p><h2 id="B树的插入"><a href="#B树的插入" class="headerlink" title="B树的插入"></a>B树的插入</h2><p><strong>插入的时候有一个关键点: 判断当前的key的个数是否小于等于m, 如果满足, 直接插入; 如果不满足, 将节点从中间的key将该节点拆成两部分, 中间的节点放到父节点即可;</strong></p><p><img src="/2020/04/14/B-Tree-B+Tree/B%E6%A0%91%E6%8F%92%E5%85%A5.png" alt="B树的插入"></p><h2 id="B树的删除"><a href="#B树的删除" class="headerlink" title="B树的删除"></a>B树的删除</h2><p>B树的删除相对复杂一点, 分为以下几种情况</p><ul><li>删除叶子节点的元素, 如果删除之后, 节点数还是大于<code>m/2</code>, 这种情况只要直接删除即可</li><li>对于非叶子节点的删除, 我们需要用后继key覆盖要删除的key, 然后在后继key所在的子支中删除该后继key</li><li>如果删除叶子节点, 如果删除元素后元素个数少于(m/2), 并且它的兄弟节点的元素大于(m/2), 也就是说兄弟节点的元素比最少值m/2还多, 则先将父节点的元素移到该节点, 然后将兄弟节点的元素再移动到父节点</li><li>删除叶子节点, 删除后不满足要求, 这时, 我们需要考虑向兄弟节点借元素, 若兄弟节点也没有多的节点, 借不了, 怎么办呢? 如果遇到这种情况, <strong>首先, 还是将先将父节点的元素移到该节点, 然后将当前节点及它的兄弟节点中的key合并，形成一个新的节点</strong></li></ul><h2 id="B-树的概念"><a href="#B-树的概念" class="headerlink" title="B+树的概念"></a>B+树的概念</h2><p>B+树和B树非常相似, <strong>不同点</strong>:</p><ul><li>B+树有两种类型的节点, 内部节点和叶子节点, 内部节点不存数据信息, 只存索引; 叶子节点存储数据信息;</li><li>每个叶子节点都含有左右节点的指针, 叶子节点按照关键字的大小自小而大顺序排列</li><li>父节点存有右孩子第一个元素的索引.</li></ul><p>B+树的插入和删除都比B树简单.</p><h2 id="B树和B-树对比"><a href="#B树和B-树对比" class="headerlink" title="B树和B+树对比"></a>B树和B+树对比</h2><ul><li>同一大小的磁盘页, B+树单一节点存储的元素更多(因为数据节点都存储在叶子节点, 而B树各个节点都含有数据元素), 使得查询的IO次数更少</li><li>所有查询都要查到叶子节点, 查询性能更稳定</li><li>所有叶子节点形成有序链表, 便于范围查询</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;B树的概念&quot;&gt;&lt;a href=&quot;#B树的概念&quot; class=&quot;headerlink&quot; title=&quot;B树的概念&quot;&gt;&lt;/a&gt;B树的概念&lt;/h2&gt;&lt;p&gt;B树(Balanced Tree, 平衡树)就是B-树, 实际上是对B-Tree的简称.&lt;/p&gt;
&lt;p&gt;B树的特点如
      
    
    </summary>
    
    
    
      <category term="数据结构, algorithm, B树, B+树" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-algorithm-B%E6%A0%91-B-%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>springboot</title>
    <link href="http://yoursite.com/2020/04/01/springboot/"/>
    <id>http://yoursite.com/2020/04/01/springboot/</id>
    <published>2020-04-01T02:07:38.000Z</published>
    <updated>2020-04-10T01:19:59.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-boot-简介"><a href="#spring-boot-简介" class="headerlink" title="spring boot 简介"></a>spring boot 简介</h2><p>spring boot是为了简化spring的开发, 不需要进行大量的配置, 是由<strong>pivotal</strong>公司提供的全新框架 </p><h3 id="为什么使用spring-boot"><a href="#为什么使用spring-boot" class="headerlink" title="为什么使用spring boot"></a><strong>为什么使用spring boot</strong></h3><ul><li><p>独立运行</p></li><li><p>简化配置</p></li><li><p>自动配置</p></li><li><p>无需xml配置</p></li></ul><h3 id="spring-boot核心配置文件"><a href="#spring-boot核心配置文件" class="headerlink" title="spring boot核心配置文件"></a>spring boot核心配置文件</h3><ul><li><p>application和bootstrap</p></li><li><p>application用于spring的自动化配置</p></li><li><p>bootstrap: 使用 Spring Cloud Config 配置中心时,这时需要在 bootstrap 配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息;</p></li></ul><p><strong>配置文件格式</strong>:</p><ul><li><p>.properties和.yml</p><p>注: .yml 格式不支持 @PropertySource 注解导入配置</p><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p></li></ul><p><strong>如果在不同的目录中存在多个配置文件,它的读取顺序是：</strong></p><p><strong>注: bootstrap配置文件是优先级最高的.</strong></p><ol><li>config/application.properties(<strong>项目根目录中config</strong>目录下)</li><li>config/application.yml</li><li>application.properties(<strong>项目根目录下</strong>)</li><li>application.yml</li><li>resources/config/application.properties(项目<strong>resources目录中config目录</strong>下)</li><li>resources/config/application.yml</li><li>resources/application.properties(<strong>项目的resources目录下</strong>)</li><li>resources/application.yml</li></ol><ul><li><p>优先级由高到底,高优先级的配置会覆盖低优先级的配置;<br>SpringBoot会从这四个位置全部加载主配置文件;互补配置;</p></li><li><p>我们还可以通过spring.config.location来改变默认的配置文件位置</p></li></ul><h2 id="开启spring-boot特性"><a href="#开启spring-boot特性" class="headerlink" title="开启spring boot特性"></a>开启spring boot特性</h2><ul><li>继承spring-boot-starter-parent项目</li><li>spring-boot-dependencies项目依赖</li></ul><p><strong>读取配置文件方式</strong></p><ul><li>@PropertySource + @Value</li><li>@Value</li><li>Environment</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="keyword">private</span> Enviroment env;</span><br></pre></td></tr></table></figure><ul><li>@ConfigurationProperties</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"db"</span>)</span><br></pre></td></tr></table></figure><h2 id="actuator-激励者-执行器"><a href="#actuator-激励者-执行器" class="headerlink" title="actuator(激励者,执行器)"></a>actuator(激励者,执行器)</h2><ul><li><p>添加依赖“compile ‘org.springframework.boot:spring-boot-starter-actuator’”</p><p>actuator默认只开启了health和info</p></li><li><p><span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo5MjEwL2hlYWx0aA==" title="http://localhost:9210/health">http://localhost:9210/health<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo5MjEwL2luZm8=" title="http://localhost:9210/info">http://localhost:9210/info<i class="fa fa-external-link"></i></span></p><p>可观察工程的信息</p></li></ul><h2 id="profile使用"><a href="#profile使用" class="headerlink" title="profile使用"></a>profile使用</h2><p>spring.profiles.active=dev/qa/prod 选择不同的环境</p><p>@Profile(“”)放在实现类上可以让不同环境运行不同的代码(如发短信), 如用Redis和Amazon 实现两套SQS, 一套用于qa, 一套用于prod</p><h2 id="springboot-日志控制"><a href="#springboot-日志控制" class="headerlink" title="springboot 日志控制"></a>springboot 日志控制</h2><p>spring boot 中使用的日志技术为logback,和log4j的作者相同,性能要优于Log4j,spring-boot-starter-logging,不用显式添加, 因为被spring-boot-starter-web所依赖</p><p>因为被spring-boot-starter-web所依赖</p><ul><li>使用时只用在配置文件中添加</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string"></span></span><br><span class="line"><span class="meta">logging.level.root</span>=<span class="string"></span></span><br></pre></td></tr></table></figure><ul><li>并在资源文件下添加logback.xml</li></ul><h2 id="spring-boot核心注解"><a href="#spring-boot核心注解" class="headerlink" title="spring boot核心注解"></a>spring boot核心注解</h2><p><strong>SpringBootApplication</strong>注解</p><ul><li><p>元注解(@Target, @Retention, @Documented, @Inherited),可以对注解进行注解的注解</p></li><li><p>@SpringBootConfigurtaion, 和Configuration注解功能一样</p></li></ul><p><strong>@ComponentScan</strong> </p><ul><li><p>basePackages: 若没有指定则扫描当前注解所标的类所在的包及其子孙包</p></li><li><p>includeFilters 和 excludeFilters</p></li></ul><p>@Enable***,导入配置类的常见方式有三种:</p><ul><li><p>以Configuration结尾,EnableScheduling —&gt; @Import(SchedulingConfiguration.class)</p></li><li><p>根据条件选择配置类,以ConfigurationSelector结尾,且实现了ImportSelector接口.</p></li><li><p>动态注册bean,以Registar结尾,且该类实现了ImportBeanDefinitionRegistar接口.用于表示在运行代码时,若用到了该配置类, 则系统会自动将其导入.</p></li><li><p>@EnableAutoConfiguration</p></li><li><p>@AutoConfigurationPackage, 用于导入并装配用户自定义的类,即自动扫描包中的类</p></li><li><p>@Import 用于导入并装配框架本身的类</p></li></ul><h2 id="spring-boot-starter简介"><a href="#spring-boot-starter简介" class="headerlink" title="spring boot starter简介"></a>spring boot starter简介</h2><p>starter相当于是一个模块, 整合了模块所需的依赖. 使用者只需依赖相应功能的starter,无需做过多的配置或依赖, springboot就能自动扫描并加载相应的模块.</p><p>如对spring web(spring mvc)的使用:spring-boot-starter-web</p><p>手写starter流程</p><p>以新建一个es-starter为例</p><ol><li><p>新建一个gradle/maven项目</p></li><li><p>创建ElasticSearchProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"sxw.elasticsearch"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String clusterName = <span class="string">"elasticsearch"</span>;</span><br><span class="line">    <span class="keyword">private</span> String clusterNodes = <span class="string">"127.0.0.1:9300"</span>;</span><br><span class="line">    <span class="keyword">private</span> String userName = <span class="string">"elastic"</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"changeme"</span>;</span><br><span class="line">    <span class="comment">// get/set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ElasticSearchProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ElasticSearchAutoConfiguration</span> </span>&#123;</span><br><span class="line"><span class="comment">// 根据ElasticSearchProperties中的属性, 创建ES client</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建spring.factories文件,指定Starter的自动装配类,spring.factories文件位于resources/META-INF目录下</p><p>org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</p><p>  cn.sxw.commons.data.es.starter.ElasticSearchAutoConfiguration</p></li></ol><h2 id="ApplicationRunner-和-CommandLineRunner"><a href="#ApplicationRunner-和-CommandLineRunner" class="headerlink" title="ApplicationRunner 和 CommandLineRunner"></a>ApplicationRunner 和 CommandLineRunner</h2><p>CommandLineRunner和ApplicationRunner接口的run()方法在SpringApplication完成启动时执行。启动完成之后,应用开始运行. CommandLineRunner和ApplicationRunner的作用是在程序开始运行前执行任务或记录信息.</p><h2 id="spring-boot-事务管理原理"><a href="#spring-boot-事务管理原理" class="headerlink" title="spring boot 事务管理原理"></a>spring boot 事务管理原理</h2><ul><li><p>在application启动类上添加<strong>EnableTransactionManagement</strong>注解</p></li><li><p>在事务方法上添加@Transactional(rollbackFor = Exception.class)</p></li></ul><p>springboot的事务管理是通过autoconfigure来决定的.</p><p>如jpa, 是通过引入的<strong>HibernateJpaAutoConfiguration</strong>来实现的, <strong>HibernateJpaAutoConfiguration也是一个spring boot starter.</strong></p><ul><li>Spring 事务管理的核心接口是<strong>PlatformTransactionManager</strong>, 这个接口有几个常使用的实现策略: <strong>HibernateTransactionManager</strong>, <strong>DataSourceTransactionManager</strong>, <strong>JpaTransactionManager</strong>等.</li></ul><p>PlatformTransactionManager中定义了3个方法:</p><ul><li><p>根据<strong>TransactionDefinition</strong> 中定义的事务传播机制(<strong>propagation</strong>), 事务隔离级别(<strong>isolation</strong>), 事务超时时间(<strong>timeout</strong>), 是否是只读事务(<strong>is read only</strong>)来获取一个事务</p><p>TransactionStatus getTransaction(TransactionDefinition definition)</p></li><li><p>提交事务</p><p>void commit(TransactionStatus status)</p></li><li><p>回滚事务</p><p>void rollback(TransactionStatus status)</p></li></ul><p><strong>springboot @Transactional注解</strong></p><ul><li><p>让checked例外也回滚：在整个方法前加上 @Transactional(rollbackFor=Exception.class) </p></li><li><p>让unchecked例外不回滚： @Transactional(notRollbackFor=RunTimeException.class) </p></li><li><p>不需要事务管理的(只查询的)方法：@Transactional(propagation=Propagation.NOT_SUPPORTED) </p><p>事务传播机制(注: <strong>方法存在于一个事务中是指存在方法调用</strong>)</p><ul><li><p><strong>REQUIRED</strong>: 业务方法需要在一个容器里运行。如果方法运行时,已经处在一个事务中,那么加入到这个事务,否则自己新建一个新的事务</p></li><li><p><strong>NOT_SUPPORTED</strong>: 声明方法不需要事务。如果方法没有关联到一个事务,容器不会为他开启事务,如果方法在一个事务中被调用,该事务会被挂起,调用结束后,原先的事务会恢复执行</p></li><li><p><strong>REQUIRESNEW</strong>: 不管是否存在事务,该方法总汇为自己发起一个新的事务。如果方法已经运行在一个事务中,则原有事务挂起,新的事务被创建</p></li><li><p><strong>MANDATORY</strong>: 该方法只能在一个已经存在的事务中执行,业务方法不能发起自己的事务。如果在没有事务的环境下被调用,容器抛出异常</p></li><li><p><strong>SUPPORTS</strong>: 该方法在某个事务范围内被调用,则方法成为该事务的一部分。如果方法在该事务范围外被调用,该方法就在没有事务的环境下执行</p></li><li><p><strong>NEVER</strong>: 该方法绝对不能在事务范围内执行。如果在就抛异常。只有该方法没有关联到任何事务,才正常执行</p></li><li><p><strong>NESTED</strong>: 如果一个活动的事务存在,则运行在一个嵌套的事务中。如果没有活动事务,则按REQUIRED属性执行。它使用了一个单独的事务,这个事务拥有多个可以回滚的保存点。内部事务的回滚不会对外部事务造成影响。它只对DataSourceTransactionManager事务管理器起效</p></li></ul></li></ul><p><strong>spring boot @Schedule注解</strong></p><ul><li><p><strong>fixedDelay</strong>: 上一次执行结束与下一次执行开始间隔的时间</p></li><li><p><strong>fixedRate</strong>: 上一次执行与下一次执行间隔的时间</p></li><li><p><strong>initialDelay</strong>: 第一次执行需要等待的时间</p></li></ul><h2 id="持续更新-注"><a href="#持续更新-注" class="headerlink" title="持续更新(注)"></a>持续更新(注)</h2><p>该篇blog并不代表该知识点的所有内容, 在今后的工作学习中, <strong><font color="#dd0000">持续更新</font></strong>! 如对blog中的观点有异议/建议,请发送email至: <span class="exturl" data-url="bWFpbHRvOnNoY2hhb3NodWFpQGZveG1haWwuY29t" title="mailto:shchaoshuai@foxmail.com">shchaoshuai@foxmail.com<i class="fa fa-external-link"></i></span>, 感谢您的阅读.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;spring-boot-简介&quot;&gt;&lt;a href=&quot;#spring-boot-简介&quot; class=&quot;headerlink&quot; title=&quot;spring boot 简介&quot;&gt;&lt;/a&gt;spring boot 简介&lt;/h2&gt;&lt;p&gt;spring boot是为了简化spring
      
    
    </summary>
    
    
    
      <category term="spring, springboot" scheme="http://yoursite.com/tags/spring-springboot/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper</title>
    <link href="http://yoursite.com/2020/03/31/zookeeper/"/>
    <id>http://yoursite.com/2020/03/31/zookeeper/</id>
    <published>2020-03-31T07:35:46.000Z</published>
    <updated>2020-04-01T02:07:13.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zookeeper-一致性介绍"><a href="#zookeeper-一致性介绍" class="headerlink" title="zookeeper 一致性介绍"></a>zookeeper 一致性介绍</h2><p>分为以下几个方面：</p><ul><li><p>顺序一致性</p></li><li><p>原子性</p></li><li><p>单一视图</p></li><li><p>可靠性</p></li><li><p>最终一致性</p></li></ul><h2 id="paxos-算法"><a href="#paxos-算法" class="headerlink" title="paxos 算法"></a>paxos 算法</h2><p>首先，有三种角色，<strong>Proposer</strong>, <strong>Acceptor</strong>, <strong>Learner</strong></p><p>分为两个阶段</p><h3 id="prepare阶段"><a href="#prepare阶段" class="headerlink" title="prepare阶段"></a>prepare阶段</h3><p>proposer会取一个全局唯一并且递增的一个提案编号N,并对N进行++操作。然后把prepare(N)这个信号发给各个Acceptor，用于试探集群是否接受该编号的提议。</p><p>Acceptor收到这个提议后，有三种情况：</p><ul><li><p>Acceptor曾经未接收过任何提议，那么它会把提案编号N存储在本地。然后发送一个Accept(myid, null, null)的信号给proposer</p></li><li><p>Acceptor本地maxN存在，且大于N,那么表示proposer的这个提议已经过时，不对proposer作任何响应</p></li><li><p>Acceptor存在maxN且小于N，那么proposer会把一个Accept(myid, maxN, value)返回给proposer</p></li></ul><h3 id="accept阶段"><a href="#accept阶段" class="headerlink" title="accept阶段"></a>accept阶段</h3><p><strong>注意有两个半数，第一个是Accept的信号，第二个是反馈信号</strong></p><ul><li><p>如果proposer收到了超过半数的accept，那么就会把真正的提案Proposal(myid, N, value)发送给所有的Acceptor。</p></li><li><p>当Acceptor拿到proposal(myid, N, value)时会再次与自己的maxN做对比，如果N是大于等于这个编号， 那么当前表决者Accept该提案，并反馈给提议者。</p></li><li><p>如果proposer接收到了来自半数以上的反馈，则发送”同步数据信息的信号“发送给曾经给自己做出响应的那些acceptor, 把”同步数据信息的信号 + 信息内容“ 发送给为接收自己提案的那些acceptor</p></li><li><p>如果没有超过半数，则再次进入prepare阶段，递增提案编号，重新提出prepare请求。</p></li></ul><h2 id="ZAB（zookeeper-atomic-broadcast）协议"><a href="#ZAB（zookeeper-atomic-broadcast）协议" class="headerlink" title="ZAB（zookeeper atomic broadcast）协议"></a>ZAB（zookeeper atomic broadcast）协议</h2><p>ZAB协议是fast paxos算法的一种工业实现，但是两者的作用又有不同。</p><p>ZAB协议的目的是构建高可用的分布式系统，如集群中leader挂掉了，那么会快速选举出一个leader。</p><p>而paxos算法更强调的是一致性，让各个节点上的数据保持一致。</p><h3 id="ZAB中的三个角色"><a href="#ZAB中的三个角色" class="headerlink" title="ZAB中的三个角色"></a>ZAB中的三个角色</h3><ul><li><p>leader, 处理事务请求，负责进行投票及决议</p></li><li><p>follower，具有处理读请求，转发事务请求，当Leader宕机后具有选举与被选举权。</p></li><li><p>observer, 不具有选举权和被选举权的follower</p></li></ul><p>其他地方对角色的一些叫法：</p><ul><li>learner = Observer + follower</li><li>quorum server = leader + follower</li></ul><h3 id="三个重要的数据"><a href="#三个重要的数据" class="headerlink" title="三个重要的数据"></a><strong>三个重要的数据</strong></h3><ul><li>zxid, 高32位是epoch，低32位是xid</li><li>och</li><li>xid</li></ul><h3 id="ZAB协议的三种模式"><a href="#ZAB协议的三种模式" class="headerlink" title="ZAB协议的三种模式"></a>ZAB协议的三种模式</h3><p>三种模式是混合出现的，如初始化阶段有<strong>恢复模式</strong>，<strong>同步模式</strong>和<strong>广播模式</strong>, 更新阶段有同步模式和广播模式</p><ul><li><p>同步模式</p><ul><li><p>初始化同步(这时候leader还是准leader):</p></li><li><p>为了保证同步的有序性，leader为每一个learner服务器准备了一个队列。</p></li><li><p>准leader将learner没有执行的过的事务封装成proposal逐一发给learner，并紧跟一条commit信息，表示该提案已经被执行过。</p></li><li><p>learner收到proposal并执行，然后follower会向准leader发送ACK信息。leader收到follower信息后，会将该follower放入follower列表中</p></li><li><p>当集群中有过半的FOLLOWER完成了初始化同步，那么该leader变为真正的leader</p></li></ul></li><li><p>广播模式</p><ul><li>消息广播算法</li></ul><p>由于只有leader具有处理事务的权利，当客户端发出事务请求后，FOLLOWER 或者 OBSERVER 会将这些事务请求转发给leader，leader会把这些事务请求分别封装成follower_queues and observer_queues，并为每个事务生成一个全局唯一的，递增的zxid，这样就保证了事务的一致性。然后leader把zxid封装成proposal发给各个follower，当follower收到proposal之后，就会与本地的事务日志中最大的zxid进行对比，如果本地的zxid小于proposal中的zxid，那么follower会发送一个ACK给leader，如果有半数以上的server发送了ACK，那么leader会向所有的FOLLOWER发送commit消息，向所有的observer发送proposal，FOLLOWER和OBSERVER收到这些消息之后，将事务更新到本地。</p></li><li><p>恢复模式（当集群刚刚启动或者当leader与半数以上的主机失联就会进入恢复模式）</p><p>两个原则：</p><ul><li><p>已被处理过的消息不能丢，例如当leader收到事务请求后，且收到了超过半数的ACK后，需要向FOLLOWER广播commit信息，如果广播没有完成而leader挂了。这个时候已经处理过的消息是不能丢的。当新的leader被选举之后，经过恢复模式，要将所有server上的数据进行同步。</p></li><li><p>被丢弃的消息不能再现，即当leader收到了proposal，还未广播出去时挂了，那么当leader再次重启之后，变为follower，这个信息是不能再现的。</p></li></ul></li></ul><h2 id="leader-选举"><a href="#leader-选举" class="headerlink" title="leader 选举"></a>leader 选举</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li><p>myid，集群中服务器的id</p></li><li><p>logicalclock(逻辑时钟)，选举之后称为epoch，不同状态下的不同叫法</p></li><li><p>zk的状态，LOOKING, FOLLOWING, OBSERVING, LEADING</p></li></ul><h3 id="leader-选举算法"><a href="#leader-选举算法" class="headerlink" title="leader 选举算法"></a>leader 选举算法</h3><ul><li><p>集群启动中的Leader选举</p><ul><li><p>每个主机启动的时候都会为自己投票<strong>(myid, zxid)</strong>。当server1启动的时候，由于其他机器没有启动，得不到任何反馈信息，所以此时server1为<strong>Looking</strong>状态。</p></li><li><p>当server2启动时，server1和server2都会给彼此发送投票，server1发现server2更合适（先比较zxid，然后比较myid），然后更新本地选票为server2的投票信息. 经统计，server2的选票已经过半，那么server2就被选举为leader，状态改为<strong>LEADING</strong>, server1被加入到了server2的Follower 列表中，状态变为<strong>FOLLOWING</strong>。</p></li><li><p>当server3启动时，由于其他server没有状态为LOOKING，所以不能进行选举，所以只能以FOLLOWER的身份加入到集群中。</p></li></ul></li><li><p>断连后的Leader选举</p><p>过程和启动中的Leader选举基本一致。如果是其他非Leader的server挂掉，只要挂的机器不到半数，就不影响集群的正常工作。如果leader挂掉，就要开始新一轮的选举。假设server2挂掉了，那么server1和server2由FOLLOWING状态变为LOOKING状态，server1和server3都会投自己，然后运行期间有可能zxid不同，然后server1和server3收到对方的投票时，server1会认为server3更合适，然后server3当选为leader。变为LEADING状态，server1变为FOLLOWING状态</p></li></ul><h2 id="zk-集群"><a href="#zk-集群" class="headerlink" title="zk 集群"></a>zk 集群</h2><ul><li><p>高可用集群的容灾，从容灾角度考虑，服务器的数量是奇数好。因为投票只有过半的才能选举成功，所以7台服务器和8台服务器的容灾能力是一样的。但从系统吞吐量上来说，8台的吞吐量还是比7台要好一点的</p><p>三机房部署：</p><p>N1 = (N -1)/2</p><p>N2(范围) = 1 到 (N - N1)/2均可</p><p>N3 = N - N1 - N2</p></li><li><p>集群扩容</p><p>如果增加机器，需要修改配置文件。所以需要进行集群重启</p></li></ul><h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><ul><li><p>C(consistency): 一致性</p></li><li><p>A(Availability): 可用性，指在有限时间内，服务器总是能对客户端的每一个请求做出响应</p></li><li><p>P(Partition tolerance): 分区容错性 </p></li></ul><p><strong>CA不能同时存在</strong>: 假如有个事务操作，如果保证了一致性，那么Leader需要将更新的结果广播出去，这个广播是需要时间的，在这段时间内如果有客户端请求过来，服务器是不能在有限的时间内做出响应的。</p><p>如果保证了可用性，那么这段时间内的一致性就是无法保证的。</p><h2 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h2><ul><li><p>Base Available(基本可用)，系统在出现不可预知的故障的时候，允许丧失部分可用性</p></li><li><p>Soft state, 允许数据存在的中间状态, 灰度状态, 过渡状态</p></li><li><p>Eventually consistent，最终一致性</p></li></ul><h2 id="zookeeper-watcher机制"><a href="#zookeeper-watcher机制" class="headerlink" title="zookeeper watcher机制"></a>zookeeper watcher机制</h2><p>zookeeper的Watch是一次性的，过程是，</p><ul><li><p>客户端生成watcher对象</p></li><li><p>客户端向服务器注册watcher对象</p></li><li><p>服务器触发watcher事件</p></li><li><p>服务器向客户端发送通知</p></li><li><p>客户端根据通知找到相应的watcher对象</p></li><li><p>watcher对象执行相应的回调函数</p></li></ul><h2 id="zookeeper-数据类型"><a href="#zookeeper-数据类型" class="headerlink" title="zookeeper 数据类型"></a>zookeeper 数据类型</h2><ul><li><p>zookeeper 数据类型是znode, zookeeper 没有像Linux那样的目录结构(UGO), 而是采用znode数据节点的概念</p></li><li><p>节点类型:(注:临时节点只能用作叶子节点)</p></li><li><p><strong>持久节点</strong>, <strong>持久顺序节点</strong>, <strong>临时节点(ephemeral)</strong>, <strong>临时顺序节点</strong></p></li><li><p><strong>ACL(Access Control List)</strong>是一种细粒度的权限访问控制, 可以针对任意用户进行细粒度的权限控制, 注意子节点和父节点不具有继承关系</p></li></ul><p><strong>权限验证策略</strong>, 即你要限制某个用户只能操作某个文件夹, 是通过是么策略来控制的</p><ul><li>IP, </li><li>digest(username:password)</li><li>world(anyone)不验证</li><li>super</li></ul><p><strong>五种权限</strong></p><ul><li><p>c(create)允许创建子节点</p></li><li><p>r(read)允许读当前节点和子节点</p></li><li><p>w(write)允许修改当前节点及子节点内容</p></li><li><p>d(delete)允许删除当前节点</p></li><li><p>a(acl)）允许修改当前节点的acl权限</p></li></ul><h2 id="zookeeper典型应用场景"><a href="#zookeeper典型应用场景" class="headerlink" title="zookeeper典型应用场景"></a>zookeeper典型应用场景</h2><ul><li><p>配置维护</p><p>应用场景，在非分布式情况中，如果只有一台主机，则无需用到zookeeper,如果要进行配置的维护，只需要更改一个文件即可。但是在大型分布式系统中，如果有上千台主机，如果再一个一个文件去修改，安全隐患就会很高。这时候就可以用到zookeeper的发布订阅模型来实现。</p><p>步骤是这样的，首先需要集群中的每个客户端都要向zookeeper中注册一个watcher监听，当维护人员进行配置变更时，zookeeper就会向客户端推送watcher事件，然后客户端收到该事件之后就会拉取最近的更新，来更新本地的配置文件</p></li><li><p>命名服务</p><p>首先创建一组业务相关的结点，然后再在该结点下创建顺序结点，那么该顺序结点的路径加名称即为生成的唯一标识</p></li><li><p>DNS服务（服务注册中心）</p><p>DNS服务是命名服务的一种特殊用法，首先创建根节点/DNS,然后在DNS结点下创建对应的应用app1,app2。然后再在app1下创建对应的服务名称结点，</p><p>如service1.company.com，该结点的数据是host1:port,host2:port等</p></li><li><p>具有状态收集功能的DNS服务</p><p>与上面相比, 该服务多了一个状态收集器。会定时从服务提供者那里收集服务的状态，放在对应的zookeeper结点下面。DUBBO就是使用zookeeper作域名服务器的。</p></li><li><p>分布式同步——Mysql数据复制总线</p></li><li><p>管理——分布式日志收集系统</p></li><li><p>式锁，排它锁/共享锁</p></li><li><p>分布式队列（FIFO队列，屏障Barrier队列）</p></li></ul><h2 id="持续更新-注"><a href="#持续更新-注" class="headerlink" title="持续更新(注)"></a>持续更新(注)</h2><p>该篇blog并不代表该知识点的所有内容, 在今后的工作学习中, <strong><font color="#dd0000">持续更新</font></strong>! 如对blog中的观点有异议/建议,请发送email至: <span class="exturl" data-url="bWFpbHRvOnNoY2hhb3NodWFpQGZveG1haWwuY29t" title="mailto:shchaoshuai@foxmail.com">shchaoshuai@foxmail.com<i class="fa fa-external-link"></i></span>, 感谢您的阅读.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;zookeeper-一致性介绍&quot;&gt;&lt;a href=&quot;#zookeeper-一致性介绍&quot; class=&quot;headerlink&quot; title=&quot;zookeeper 一致性介绍&quot;&gt;&lt;/a&gt;zookeeper 一致性介绍&lt;/h2&gt;&lt;p&gt;分为以下几个方面：&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
    
    
      <category term="zookeeper, 分布式, 服务注册" scheme="http://yoursite.com/tags/zookeeper-%E5%88%86%E5%B8%83%E5%BC%8F-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://yoursite.com/2020/03/30/mysql/"/>
    <id>http://yoursite.com/2020/03/30/mysql/</id>
    <published>2020-03-30T03:22:43.000Z</published>
    <updated>2020-04-14T06:48:44.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL语言分类"><a href="#SQL语言分类" class="headerlink" title="SQL语言分类"></a>SQL语言分类</h2><ul><li><p><strong>DDL</strong>: Data Definition Language 数据定义语言create， alter， drop等</p></li><li><p><strong>DML</strong>: Data Manipulation Language 数据操纵语言insert， delete，update</p></li><li><p><strong>DCL</strong>:  Data Controll Language 数据控制语言grant等</p></li><li><p><strong>DQL</strong>: Data Query Language 数据查询语言select，from， where</p></li></ul><h2 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h2><p><strong>补充</strong>: </p><ul><li><p>正数的二进制的原码=反码=补码</p></li><li><p>负数的二进制的反码=原码的所有位(符号位除外)取反</p></li><li><p>补码=反码+1</p></li><li><p>计算机中负数是用补码的形式保存, 并用它参与加减法运算的, 减法会被转换为加法, 计算机中没有减法运算</p></li><li><p>1byte的有符号位的范围是 -128(1000 0000) ~ 127(0111 1111)</p></li><li><p>10000001(-127), 11111111(-1)</p></li></ul><p><strong>bit</strong> 1位 一般对应Java中的Boolean(0为false，1为true)</p><p><strong>tinyint</strong> 1字节（-128 ~ 127(有符号)，0 - 255（无符号））255</p><p><strong>smallint</strong> 2字节  65535</p><p><strong>mediumint</strong> 3字节1千多万</p><p><strong>int</strong> 4字节 40多亿</p><p><strong>bigint</strong> 8字节 非常多</p><p><strong>float</strong> 4字节单精度浮点数</p><p><strong>double</strong> 8字节双精度浮点数</p><p><strong>decimal(P, D)</strong>  P为小数总位数，D为精度</p><p><strong>date</strong> 3字节 </p><p><strong>time</strong> 3字节</p><p><strong>year</strong> 1字节</p><p><strong>datetime</strong> 8字节</p><p><strong>timestamp</strong> 4字节</p><h2 id="MySQL-SQL解析顺序"><a href="#MySQL-SQL解析顺序" class="headerlink" title="MySQL SQL解析顺序"></a>MySQL SQL解析顺序</h2><p>FROM –&gt; ON –&gt; LEFT JOIN –&gt; WHERE –&gt; GROUP BY –&gt; HAVING –&gt; SELECT –&gt; ORDER BY –&gt; LIMIT</p><p>注: MySQL where解析是从左往右; Oracle是从右往左;</p><h2 id="MySQL-锁"><a href="#MySQL-锁" class="headerlink" title="MySQL 锁"></a>MySQL 锁</h2><ul><li><p>表级锁</p><p>lock table {table_name} read/write;</p><p>unlock tables;</p></li><li><p>元数据锁, MDL(meta data lock)</p><p>不需要显式使用,MySQL5.5后默认加入的, 读锁之间不互斥,读写锁之间,写锁之间是互斥的.</p></li><li><p>行级锁(由存储引擎来实现,主要InnoDB)</p></li></ul><h2 id="MySQL-事务"><a href="#MySQL-事务" class="headerlink" title="MySQL 事务"></a>MySQL 事务</h2><ul><li><p><strong>A(Atomicity)</strong>, 原子性,要么全部执行,要么全部失败</p></li><li><p><strong>C(Consistency)</strong>, 在事务执行前后,数据库必须是稳定的或状态一致的</p></li><li><p><strong>I(Isolation)</strong>, 事务之间不会相互影响</p></li><li><p><strong>D(Durability)</strong>, 事务执行成功之后必须全部写入磁盘</p></li></ul><p>开启事务: Begin, Start Transaction</p><p>事务提交: commit</p><p>事务回滚: rollback</p><p><strong>事物的隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大</strong></p><table><thead><tr><th align="center">事务隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">读未提交(read-uncommitted)</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">读已提交(read-committed)</td><td align="center">否</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">可重复读(repeatable-read)</td><td align="center">否</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">串行化(serializable)</td><td align="center">否</td><td align="center">否</td><td align="center">否</td></tr></tbody></table><p>ru: 一个事务可以读另一个事务并未提交的更新结果</p><p>rc: 一个事务的操作结果只有在提交以后, 才可以被另一个事务读取到更新后的结果</p><p>rr: 整个事务中, 对同一笔数据的读取结果是相同的, 不管是否存在其他事务对共享数据的操作</p><p>serializable: 所有事务依次执行</p><ul><li><p><strong>脏读</strong>: 事务A读取了被另一个事务B修改, 但是并未提交的数据(如果事务B回滚,则出现脏读)</p></li><li><p><strong>不可重复读</strong>: (前提是在一个事务中)事务A和事务B对共享资源进行操作:</p><p>a. 事务A读取共享资源S</p><p>b. 事务B修改共享资源S为S1</p><p>c. 事务B提交共享资源S1</p><p>d. 事务A再次读取共享资源S</p><p>在rr和serializable隔离级别下, 会读取旧值</p><p>在ru和rc隔离级别下, 会读取到新值S1(这就是不可重复读)</p></li><li><p><strong>幻读</strong>(重点在于新增或者删除(数据条数的变化)):, 同样的条件第一次和第二次查询出来的结果不一样, 这就是幻读. 但是幻读和不可重复读的区别在于, 幻读</p><p>重点在于新增或者删除, 数据条数的变化. </p></li></ul><p><strong>Oracle</strong>数据库默认隔离级别是 <strong>Read Committed</strong></p><p><strong>Mysql</strong>默认隔离级别是 <strong>Repeatable Read</strong></p><p><strong>查看数据库默认隔离级别:</strong> </p><p>select @@tx_isolation; // 之前版本</p><p>select @@transaction_isolation;</p><p><strong>注: 对于多数应用程序,优先把隔离级别设置为Read committed;能够避免脏读,而且具有较好的并发性能.</strong></p><h2 id="MySQL-索引"><a href="#MySQL-索引" class="headerlink" title="MySQL 索引"></a>MySQL 索引</h2><p>索引是可以高效获取数据的数据结构. 索引本身也很大, 存储在磁盘文件中(单独的索引文件或和数据一起存储在数据文件中)</p><p>索引的劣势是:</p><ul><li>占用磁盘空间</li><li>虽然提高了查询效率,但是会降低表的更新效率. 因为进行增删改操作的时候要更新索引文件</li></ul><p><strong>单列索引</strong></p><ul><li><p><strong>普通索引</strong>: 纯粹为了查询快, 允许重复和空值</p><p>create index index_name on table (column(length));</p><p>alter table table_name add index index_name on column(length);  </p></li><li><p><strong>唯一索引</strong>: 唯一, 但允许为空</p><p>create unique index index_name on table(column(length));</p></li><li><p><strong>主键索引</strong>: 唯一,不为空</p></li></ul><p><strong>组合索引</strong></p><p>遵循<strong>最左匹配</strong>原则, 一般建议用组合索引代替单列索引</p><p><strong>全文索引</strong></p><p>只有在<strong>MYISAM</strong>引擎上才能使用, 只能在CHAR, VARCHAR, TEXT类型上使用</p><p>create fulltext index index_name on table (column(length));</p><p>删除索引</p><p>drop index index_name on table_name;</p><p>查看索引</p><p>show index from table_name;</p><p><strong>索引失效的几种情况</strong></p><ul><li>在索引列上做操作</li><li>!=, &lt;&gt;, is NULL, is not Null, like “%var”, or</li><li>字符串不加单引号</li></ul><h2 id="sql-执行流程"><a href="#sql-执行流程" class="headerlink" title="sql 执行流程"></a>sql 执行流程</h2><p>客户端 —&gt; 连接器(管理连接,权限验证) —&gt; 查询缓存(命中直接返回) —&gt;</p><p> 分析器(词法分析,语法分析) —-&gt; 优化器(执行计划生成,索引选择) —&gt; 执行器(操作引擎,返回结果) —&gt;  存储引擎(存储数据,提供读写接口)</p><h2 id="MySQL日志"><a href="#MySQL日志" class="headerlink" title="MySQL日志"></a>MySQL日志</h2><ul><li><p><strong>错误日志</strong>: 即SQL执行错误的日志</p></li><li><p><strong>二进制日志</strong></p><p>binlog 记录了数据库所有的ddl语句和dml语句, 主要用于数据恢复</p></li><li><p><strong>查询日志</strong>(general query log)</p><p>默认关闭,打开会影响性能(造成大量不必要的IO)</p></li><li><p><strong>慢查询日志</strong></p><p>默认关闭, <strong>slow_query_log</strong>, long_query_time=10(秒), 记录查询超过10秒的所有查询</p></li><li><p><strong>事务Redo/Undo日志</strong>, ib_logfile0和ib_logfile1</p></li><li><p><strong>中继日志</strong>, 是在主从复制环境中产生的日志,主要作用是为了从机可以从中继日志获取到主机同步过来的SQL语句,然后执行到从机中</p></li></ul><h2 id="InnoDB数据文件"><a href="#InnoDB数据文件" class="headerlink" title="InnoDB数据文件"></a>InnoDB数据文件</h2><ul><li><p>.frm: 主要包括表的数据定义信息</p></li><li><p>.ibd: 存储表数据和索引信息,一个表对应一个ibd文件</p></li><li><p>ibdata: 所有表共享一个或者多个ibdata文件</p></li></ul><h2 id="多版本并发控制"><a href="#多版本并发控制" class="headerlink" title="多版本并发控制"></a>多版本并发控制</h2><p>MVCC(Multi-version Concurrency Control), 最大好处是读不加锁,读写不冲突</p><p> 快照读(snapshot read) 读取的是记录的可见版本,不用加锁</p><p> 当前读(current read) 读取的是最新版本, 加锁. 插入/删除/更新操作属于当前读</p><p>mvcc需要注意以下几点:</p><ul><li><p>mysql的innoDB采用的是行级锁, 利用mvcc是用来提高<strong>读</strong>性能.</p></li><li><p>mvcc原理是在每一条记录后面新增两列: create version和delete version</p></li><li><p><strong>insert</strong>的时候create version加1; </p><p><strong>update</strong>的时候把 老记录的delete version变为当前事务版本号, 新纪录的create version也是当前事务版本号; </p><p><strong>delete</strong>的时候把delete version变为当前事务版本号; </p><p><strong>select</strong>的时候符合以下条件的记录可以被查出来:</p><ul><li>delete version大于当前事务版本号的记录; </li><li>create version 小于或者等于当前事务版本号</li></ul></li><li><p>只针对read commited和repeatable read两种; 因为读未提交(read uncommited)是读未提交的, 所以不存在版本问题; 序列化(serializable)是会所有的行都加锁.</p></li></ul><h2 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h2><p>explain 会产生10多列</p><ul><li><p><strong>id</strong>: id若相同,执行顺序由上向下. id不同(有子查询), id越大,优先级越高</p></li><li><p><strong>select_type</strong>: 查询类型</p></li><li><p><strong>simple</strong>(无连接,无子查询)</p></li><li><p><strong>primary</strong>(有子查询或union操作), 外层的为primary</p></li><li><p><strong>union</strong></p></li><li><p><strong>dependent</strong> <strong>union</strong></p></li><li><p><strong>union result</strong></p></li><li><p><strong>subquery</strong></p></li><li><p><strong>dependent subquery</strong></p></li><li><p><strong>derived</strong></p></li><li><p><strong>table</strong></p></li></ul><p>type: 依次从好到差</p><ul><li><p><strong>system</strong>,表中只有一行数据或是空表</p></li><li><p><strong>const</strong>,使用唯一索引或者主键</p></li><li><p><strong>eq_ref</strong>,连接查询, 连接字段为主键或者唯一索引</p></li><li><p><strong>ref</strong>, 针对非唯一索引, 使用等值查询或者是使用了最左前缀规则索引的查询</p></li><li><p><strong>fulltext</strong>, 全文索引,优先级高于普通索引</p></li><li><p><strong>ref_or_null</strong>, 类似ref,但增加了null值的比较</p></li><li><p><strong>unique_subquery</strong>, 用于where查询的in查询,子查询返回不重复的唯一值</p></li><li><p><strong>index_subquery</strong>, </p></li><li><p><strong>range</strong>, 索引范围扫描&gt;, &lt;, is null, between, in, like等</p></li><li><p><strong>index_merge</strong>, </p></li><li><p><strong>index</strong>, 索引全匹配扫描</p></li><li><p><strong>all</strong>.</p><p>除all之外,其他的type都可以使用到索引, <strong>最少要使用到range级别</strong></p></li></ul><p>possible_keys, 此次查询中可能选用的索引</p><p>key, 真正使用到的索引</p><p>key_len, 使用到索引的长度(如果使用了一个索引,那么长度即为该字段的长度), 注:排序和分组即使用到了索引也不会计算到key_len中.</p><p>ref, 若是常数等值查询,这里会显示const; 连接查询显示驱动表的关键字段; 如果内部有隐式转换, 此处显示func</p><p>rows, 扫描的行数, 不是精确值(因为InnoDB使用了MVCC)</p><p>extra, 一些其他重要的额外信息, distinct, no table used, using filesort(排序中没用到索引),</p><p> using index(用到了覆盖索引, 如果同时出现using where表明用到了索引查找,如果没有表明用到了索引查询)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">全值匹配我最爱,最左前缀要遵守;</span><br><span class="line">带头大哥不能死,中间兄弟不能断;</span><br><span class="line">索引列上少计算,范围之后全失效;</span><br><span class="line">LIKE百分写最右,覆盖索引不写星;</span><br><span class="line">不等空值还有or,索引失效要少用;</span><br></pre></td></tr></table></figure><h2 id="数据库范式"><a href="#数据库范式" class="headerlink" title="数据库范式"></a>数据库范式</h2><ul><li><p>第一范式: 列不可再分(根据需求,如地址的拆分, 姓和名的拆分)</p></li><li><p>第二范式: 表的唯一性; 表必须有主键,针对联合主键的情况,表中的列不能只与联合主键的某列相关</p></li><li><p>第三范式: 表中的每一列数据都和主键直接相关,而不能间接相关,其实就是消除冗余字段(但是有时候必须有冗余)</p></li></ul><h2 id="mysql-优化-执行计划explain-慢查询日志-Query-Profiler"><a href="#mysql-优化-执行计划explain-慢查询日志-Query-Profiler" class="headerlink" title="mysql 优化(执行计划explain, 慢查询日志, Query Profiler)"></a>mysql 优化(<strong>执行计划explain</strong>, <strong>慢查询日志</strong>, <strong>Query Profiler</strong>)</h2><ul><li><p>慢查询日志(show variables like ‘%slow%’;)</p></li><li><p>慢查询日志分析工具: mysqldumpslow(mysql自带的)</p><p>常用参数: mysqldumpslow -s t -t 10 -g “left join”</p><p>-s: 按什么排序</p><p>-t: 返回几条数据</p><p>-g: 正则</p></li><li><p>另一种工具: percona-toolkit</p></li></ul><p>Query Profiler分析语句, 能定位出一条SQL语句执行的<strong>各种资源消耗情况</strong>, 比如<strong>CPU, IO</strong>等, 以及该<strong>SQL执行所耗费的时间</strong>等.</p><p><strong>select @@profiling</strong>;</p><p>sql优化:</p><ul><li><p>如果预先知道select的查询结果是一条,最好使用LIMIT 1,可停止全表扫描</p></li><li><p>分页offset过大时: select * from user where id &gt;= (select id from user order by id limit 100000,1) limit 20;</p></li><li><p>尽量不使用count(*), 使用count(主键)</p></li><li><p>count(*), 遍历所有行</p></li><li><p>count(列), 查询指定列不为null的行数</p></li></ul><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p><strong>主对外工作,从对内备份</strong></p><ul><li><p>配置:在配置文件[mysqld]段下添加:</p><p># 启用二进制日志</p><p>log-bin=mysql-bin</p><p># 服务器唯一ID, 一般取IP最后一段</p><p>server-id = 133</p></li><li><p>登录客户端, 给从机授备份权限: grant replication slave on <em>.</em> to ‘从机MySQL用户名‘@’从机IP’ identified by ‘从机MySQL密码’; </p></li><li><p>从服务器配置, 修改my.conf文件,</p><p>[mysqld]</p><p>server-id=135</p><p>在从机上执行:</p><p>change master to master_host = ‘192.168.10.135’, master_port= 3306, master_user=’’, master_password=’’, mysql_log_file=’’, master_log_pos=123(此值为从binlog的哪个位置开始复制) </p></li></ul><p><strong>mysql复制的优点：</strong></p><ul><li><p>如果主库出现问题，可以快速切换到从库提供服务</p></li><li><p>可以在从库执行查询操作(更新不频繁的数据)，降低主库的访问压力。</p></li><li><p>可以在从库进行备份，以免备份期间影响主库的服务。</p></li></ul><p><strong>主从复制原理:</strong></p><ul><li>mysql在提交时会把变更存在binlog日志中;</li><li>mysql推送二进制文件binlog到从库relay log,从库根据relay log做数据变更</li></ul><p><strong>共3个线程: Binlog dump线程(主库), I/O线程和SQL线程(从库)</strong></p><ul><li>当启动复制(start slave)时, 创建I/O线程连接主库</li><li>主库创建Binlog dump线程读取事件发送到I/O线程</li><li>I/O线程读取到数据放入从机的relay log中</li><li>之后从机的SQL线程读取中继日志更新数据库</li></ul><h2 id="mysql聚集索引和非聚集索引"><a href="#mysql聚集索引和非聚集索引" class="headerlink" title="mysql聚集索引和非聚集索引"></a>mysql聚集索引和非聚集索引</h2><ul><li><p><strong>聚集索引</strong>是指索引值的顺序与数据的存储顺序一致, 通常是<strong>主键</strong></p></li><li><p><strong>非聚集索引</strong>是指索引值的顺序与数据的存储顺序通常不一致, 如<strong>普通索引</strong>, <strong>唯一索引</strong>, <strong>联合索引</strong>等;</p></li><li><p>如果一个表中存在主键, 那么该主键就为聚集索引; </p></li><li><p>如果没有主键, 那么第一个非空索引为聚集索引;</p></li><li><p>如果没有合适的索引, 那么InnoDB内部会生成一个隐藏的主键作为聚集索引, 该聚集索引是6个字节的列, 自增;</p></li></ul><h2 id="mysql-char和varchar的区别"><a href="#mysql-char和varchar的区别" class="headerlink" title="mysql char和varchar的区别"></a>mysql char和varchar的区别</h2><p>char(n)中的n是字符数, 范围是0~255(额外需要1到2个字节来存长度)</p><p>varchar(n)中的n也是字符数，但是最大值需要通过编码来算, 不能超过65535字节(从中还需要拿出1到2个字节来存长度)</p><p>一般定长的数据选用char类型, 比如身份证号, 手机号, 电话等. 长度变化很大的可以使用varchar类型</p><p>经测试, 100万条的数据, char和varchar的数据类型, 无论是否添加索引, varchar的搜索都要更快一点</p><h2 id="mysql-索引数据结构"><a href="#mysql-索引数据结构" class="headerlink" title="mysql 索引数据结构"></a>mysql 索引数据结构</h2><p>MySQL索引是B+树, 在经典B+Tree的基础上进行了优化，增加了顺序访问指针. 在B+Tree的每个叶子节点增加一个指向相邻叶子节点的指针, 就形成了带有顺序访问指针的B+Tree. 这样就提高了区间访问性能</p><h2 id="持续更新-注"><a href="#持续更新-注" class="headerlink" title="持续更新(注)"></a>持续更新(注)</h2><p>该篇blog并不代表该知识点的所有内容, 在今后的工作学习中, <strong><font color="#dd0000">持续更新</font></strong>! 如对blog中的观点有异议/建议,请发送email至: <span class="exturl" data-url="bWFpbHRvOnNoY2hhb3NodWFpQGZveG1haWwuY29t" title="mailto:shchaoshuai@foxmail.com">shchaoshuai@foxmail.com<i class="fa fa-external-link"></i></span>, 感谢您的阅读.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SQL语言分类&quot;&gt;&lt;a href=&quot;#SQL语言分类&quot; class=&quot;headerlink&quot; title=&quot;SQL语言分类&quot;&gt;&lt;/a&gt;SQL语言分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DDL&lt;/strong&gt;: Data Definition Lan
      
    
    </summary>
    
    
    
      <category term="DB, database, MySql" scheme="http://yoursite.com/tags/DB-database-MySql/"/>
    
  </entry>
  
  <entry>
    <title>jvm</title>
    <link href="http://yoursite.com/2020/03/20/jvm/"/>
    <id>http://yoursite.com/2020/03/20/jvm/</id>
    <published>2020-03-20T00:37:05.000Z</published>
    <updated>2020-04-09T03:14:45.556Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jvm基础"><a href="#jvm基础" class="headerlink" title="jvm基础"></a>jvm基础</h2><ol><li><p><strong>jvm和hotspot关系</strong></p><p><strong>hotspot</strong>是基于jvm规范开发出来的产品, 一般情况使用的都是hotspot的jvm. 除此之外还有<strong>BEA</strong> 的<strong>Jrockit</strong>, <strong>IBM</strong>的<strong>J9</strong>也是JVM的产品.</p></li><li><p><strong>jvm和Java语言的关系</strong></p><p>jvm和Java语言本身没有关系, jvm只和class文件有关系. 除了Java之外, <strong>groovy和Scala</strong>等其他语言也可以产生class文件.</p></li><li><p><strong>jvm和jdk 和 jre的关系</strong></p><p><strong>Jdk(java development kit)</strong>是由Java语言开发的工具包, 在jdk安装目录下有一个jre目录, 里面有两个文件夹bin和lib. bin里的就是jvm, lib则是jvm工作所需要的类库, 而jvm和lib合起来就称为jre.</p></li></ol><p><img src="/2020/03/20/jvm/jdk-jre-jvm.png" alt="jdk-jre-jvm"></p><ol start="4"><li><p><strong>jvm的两种运行模式: client和server</strong></p><p>client主要运行GUI Java桌面程序. client模式启动速度较快, server模式启动较慢. </p></li></ol><h2 id="jvm类加载子系统"><a href="#jvm类加载子系统" class="headerlink" title="jvm类加载子系统"></a>jvm类加载子系统</h2><p><strong>类的加载过程: 加载 —-&gt; 连接(验证, 准备, 解析) —–&gt; 初始化 —–&gt; 使用 —–&gt; 卸载</strong></p><h3 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a><strong>类加载的时机</strong></h3><ul><li><p>创建类的实例(User user = new User())</p></li><li><p>读写某个类或者接口的静态变量(UserUtil.STATIC_VARIABLE)</p></li><li><p>调用类的静态方法(UserUtil.STATIC_METHOD)</p></li><li><p>通过反射方法获取类(Class.forName), 注:Classloader的loadClass方法不会加载类.</p></li><li><p>初始化一个类的子类(有父类的子类)</p></li><li><p>JVM启动的时候, 被标明启动类的类(包含Main方法的类)</p></li></ul><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><ol><li><p>通过一个类的全限定名来获取定义此类的二进制字节流(Class.forName(“com.cshang.User”))</p></li><li><p>将这个字节流所代表的<strong>静态存储结构</strong>转化为<strong>方法区的运行时数据结构</strong></p></li><li><p>在Java<strong>堆</strong>中生成一个代表这个类的java.lang.class对象, 作为<strong>方法区</strong>对这些数据的访问入口</p></li></ol><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>​    确保被加载的类的正确性</p><ul><li><p><strong>类文件的结构检查</strong>: 检查是否满足Java类文件的固定<strong>格式</strong>. 并且能被当前版本的虚拟机处理</p></li><li><p><strong>语义检查</strong>: 确保类本身符合Java的语言规范</p></li><li><p><strong>字节码验证</strong>: 确保字节码流可以被Java虚拟机安全的执行. 确保被验证的类的方法在运行时不会做出危害虚拟机安全的行为.</p></li><li><p><strong>符号引用验证</strong>: 这一阶段发生在虚拟机将<strong>符号引用</strong>转换为<strong>直接引用</strong>的时候(解析阶段), 主要是对类自身以外的信息进行匹配性的校验. 目的是确保<strong>解析</strong>动作能够正常执行.</p></li></ul><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>​    <strong>为类的静态变量分配内存, 并将其初始化为默认值</strong></p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>​    <strong>把类中的符号引用转化为直接引用</strong>. 比如说方法的符号引用, 是由方法名和相关描述组成, 在解析阶段, jvm把符号引用替换为指针, 这个指针就是直接引用, 它指向该方法在方法区中的内存位置.</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li><p>为类的静态变量赋予正确的初始值,(注:在连接的准备阶段已经将静态变量初始化为默认值)</p></li><li><p>成员变量也将被初始化</p></li><li><p>若该类具有超类, 则对其进行初始化</p></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>​    使用就不做过多介绍</p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><p>​    只有<strong>自定义的类加载器</strong>才是可以被卸载的</p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p><strong>类加载器的目的是根据一个类的全限定名来读取此类的二进制字节流到jvm中, 然后产生一个与目标类对应的java.lang.class对象实例. 在虚拟机中提供了4种类加载器: **启动(Bootstrap Classloader)类加载器, 扩展(Extension Classloader)类加载器, 应用程序类(Application Classloader)加载器, 自定义(User Classloader)类加载器</strong></p><ul><li><p><strong>启动类加载器</strong>: 默认放在/lib目录中, 或者-Xbootclasspath参数所指定的路径中.是虚拟机识别的类库, 用户无法直接使用.</p></li><li><p><strong>扩展类加载器</strong>: 默认放在/lib/ext目录中, 或者被java.ext.dirs系统变量所指定的路径中的所有类库, 用户可直接使用.</p></li><li><p><strong>应用类加载器</strong>: 这个类有sun.misc.Launcher$AppClassloader实现, 是Classloader中getSystemClassloader的返回值, 它负责用户classpath所指定的类库. 用户可直接使用. </p></li><li><p><strong>自定义加载器</strong>: 用户自己定义的类加载器. 只需要<strong>继承ClassLoader类</strong>, <strong>重写findClass方法</strong>, 自己定义class的地址, 得到字节数组, 然后通过<strong>defineClass方法将字节数组转换为class对象</strong>.</p></li><li><p><strong>双亲委派模型</strong>: 当一个类加载器收到类加载请求时, 它首先不会自己去加载这个类的信息, 而是把该请求转发给父类加载器, 依次向上. 所以所有的类加载请求都会被传递到父类加载器中，只有当父类加载器中无法加载到所需的类，子类加载器才会自己尝试去加载该类</p></li></ul><h2 id="jvm运行时数据区"><a href="#jvm运行时数据区" class="headerlink" title="jvm运行时数据区"></a>jvm运行时数据区</h2><p><img src="/2020/03/20/jvm/jvm%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.png" alt="jvm运行时数据区"></p><p>按照是否线程共享分为两部分:</p><ol><li><p><strong>线程共享, 方法区和堆</strong></p><p><strong>方法区</strong></p><p>​    也称为永久代(PermGen)<strong>注:是在1.7之前, 即hotspot在1.7之前是使用永久代来实现方法区. -XX:PermSize: 方法区初始大小, -XX:MaxPermSize: 方法区最大大小. **hotspot从1.8开始使用元空间替代了永久代</strong>. -XX:MetaspaceSize,达到该值就会触发GC进行类型卸载, 同时GC会对该值进行调整,如果释放了大量空间,就适当降低该值,如果释放了很少的空间,那么在不超过**MaxMetaspaceSize时,适当提高该值 -XX:MaxMetaspaceSize,默认没有限制.</p></li></ol><p>   <strong>在方法区中，存储了每个类的信息（包括类的名称、修饰符、方法信息、字段信息）、类中静态变量、类中定义为final类型的常量、类中的Field信息、类中的方法信息以及编译器编译后的代码等</strong></p><ul><li><p><strong>元数据和永久代的区别</strong></p><ul><li><p><strong>存储位置不同</strong>, 永久代存储在jvm中和新生代, 老年代地址是连续的, 而元空间属于本地内存.</p></li><li><p><strong>存储内容不同</strong>, <strong>元空间存储类的元信息</strong>,<strong>常量池(jdk1.7)</strong>并入到堆中, 相当于永久代的数据被拆分到了元数据和堆中.</p></li></ul><p><strong>堆</strong></p><p>​    存放new 生成的对象和数组, 是虚拟机管理的内存中最大的一块. </p></li></ul><p>jvm的内存划分, 如图:</p><p><img src="/2020/03/20/jvm/jvm%E5%86%85%E5%AD%98%E5%88%92%E5%88%86.png" alt="jvm内存划分"></p><p>如图所示, 堆分为年轻代, Old Memory(老年代), Perm(永久代), 在JDK1.8中<strong>永久代(方法区)</strong>被替换为<strong>MetaSpace</strong>, 且MetaSpace存在于内存中, 永久代存在于JVM中.</p><ul><li><p><strong>新生代</strong>: 分为<strong>Eden, survivor from, survivor to</strong>三部分, 比例默认为8:1:1. 使用复制清除算法(Copying), 因为每次垃圾回收都要在该空间回收大部分对象. 新创建的对象放在Eden区, 如果GC发现该对象有被引用, 就放入suvivor from区, 如果超过15次(默认)GC, 该对象仍然存在, 就把该对象放入老年代; 使用的时候每次只使用Eden和survivor from两个空间, <strong>垃圾回收时将存活对象放入未使用的survivor空间(即survivor to)中. 清空Eden和刚使用过的survivor空间.</strong> </p></li><li><p><strong>老年代</strong>: 采用标记整理算法(mark-compact), 原因是老年代每次<strong>GC只会回收少部分对象</strong>. 在survivor区的对象经过若干次(默认15)GC之后仍然存活的, 就会被转移到老年代. <strong>大对象直接进入老年代</strong>(很长的字符串或数组).</p></li><li><p><strong>永久代(1.8之后变为Metaspace): 也称为方法区, 存储程序运行时长期存活的对象, 比如类的元数据,方法, 常量, 属性等. 注:永久代移除是为了融合hotspot的jvm和 JRockit VM而作出的改变, 因为JRockit没有永久代. 有了元空间就不会再出现PermGen OOM了.</strong></p></li></ul><ol start="2"><li>线程不共享, Java栈(虚拟机栈), 本地方法栈, 程序计数器</li></ol><ul><li><p><strong>Java栈(虚拟机栈)</strong>: 虚拟机栈是Java执行方法的内存模型, 每个方法调用的时候都会创建一个栈帧, 把栈帧压入栈,. 栈帧存放方法的相关信息, 包括局部变量数表, 返回值, 操作数栈, 动态链接</p><p>局部变量表: 包含了方法执行过程中的所有变量. 局部变量数组所需要的空间在编译期间完成分配, 在方法执行期间不会改变.</p><p>返回值</p><p>操作数栈</p><p>动态链接: 常量池中的引用, 支持方法调用过程中动态链接.</p></li><li><p><strong>本地方法栈</strong>: 本地native方法的内存模型</p></li><li><p><strong>程序计数器</strong>: 指向当前线程正在执行的字节码指令(即当前执行到哪一行了), 在JVM规范中规定，如果线程执行的是<strong>非native</strong>（本地）方法，则程序计数器中保存的是当前需要执行的指令的地址；如果线程执行的是<strong>native</strong>方法，则程序计数器中的值是undefined。</p></li></ul><p><strong>由于程序计数器中存储的数据所占空间的大小不会随程序的执行而发生改变，因此，对于程序计数器是不会发生内存溢出现象(OutOfMemory)的</strong>。</p><h2 id="jvm执行引擎"><a href="#jvm执行引擎" class="headerlink" title="jvm执行引擎"></a>jvm执行引擎</h2><p>类加载器负责装载编译后的字节码, 然后加载到运行时数据区(Running Data Area), 然后执行引擎负责具体的代码调用及执行过程. 由于字节码并不是机器可以识别的, 所以必须由<strong>执行引擎把字节码转换成jvm可以识别的语言</strong>. 具体有以下两种方式:</p><ul><li><p><strong>解释器(interpreter)</strong>: 一条一条的读取, 解释并且执行字节码指令. </p></li><li><p><strong>即时(Just-in-time)编译器(Compiler)</strong>:  正常情况下都是由解释器来执行, 但是当一个方法或代码块运行特别频繁的时候, 这部分代码就会被认定为<strong>”热点代码”</strong>, 然后由即时编译器执行.</p></li></ul><p><img src="/2020/03/20/jvm/Java%E7%BC%96%E8%AF%91%E5%99%A8%E5%92%8C%E8%A7%A3%E9%87%8A%E5%99%A8%E7%9A%84%E5%8D%8F%E5%90%8C%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" alt="Java编译器和解释器的协同工作流程"></p><p><strong>解释器和编译器</strong>:<strong>解释器</strong>是一种直接执行高级语言代码的计算机程序, 而无需代码编译成机器码.<strong>编译器</strong>是将代码编译成机器可以识别的代码的程序.</p><p><strong>“热点代码”</strong>有两类:多次被调用的方法, 多次被执行的循环体. hotspot虚拟机采用<strong>”基于热点计数器的热点探测”</strong>方法来判断一段代码是不是热点代码, 共有两种计数器:<strong>方法调用计数器(统计方法被调用的次数)和回边计数器(统计循环体代码被执行的次数)</strong>.</p><h2 id="GC垃圾回收"><a href="#GC垃圾回收" class="headerlink" title="GC垃圾回收"></a>GC垃圾回收</h2><ol><li><strong>常见垃圾回收算法</strong></li></ol><ul><li><p><strong>Mark-sweep(标记清除算法):</strong> 分为标记阶段和清除阶段, 标记阶段标记出所有需要回收的对象, 清除阶段清除标记的对象. </p><p>优缺点: 实现简单, 但容易产生内存碎片(即会产生很多不连续的空间).</p></li><li><p><strong>Copying(复制清除算法)</strong>: 将可用内存分为大小相等的两块, 每次只使用其中的一块. 当进行垃圾回收的时候, 把其中存活对象全部移动到另外一块中, 然后把已使用的内存空间一次性清空掉.</p><p>优缺点: 不容易产生内存碎片; 可用内存空间少; 存活对象多的话, 效率低下.</p></li><li><p><strong>Mark-compact(标记整理算法)</strong>: 先标记存活对象, 然后把存活对象向一边移动, 然后清理掉边界以外的内存.</p><p>优缺点: 不容易产生内存碎片, 内存利用率高, 存活对象多且分散的时候, 移动次数多, 效率低下.</p></li><li><p><strong>分代收集算法</strong>: 把堆分为新生代和老年代, 根据各自的特点采用不同的算法.</p><p>jvm堆新生代需要回收大量的对象, 所以采用复制清除算法, 老年代回收少, 因此采用标记整理算法.</p></li></ul><ol start="2"><li><p>垃圾回收会影响程序的性能, Java虚拟机必须要追踪程序中有用的对象, 释放没用对象, 这个过程消耗处理器时间.</p></li><li><p>几种不同的垃圾回收类型</p></li></ol><ul><li><p>Minor GC: 从年轻代(Eden, suvivor)回收内存. 当JVM无法为一个对象分配内存时触发.</p></li><li><p>Major GC: 清理整个老年代, 当Eden区内存不足时触发</p></li><li><p>Full GC: 清理整个堆空间, 包括年轻代和老年代. 当老年代内存不足时触发.</p></li></ul><ol start="4"><li><p>jvm哪些区域需要回收</p><p>jvm包括, 本地方法栈, 虚拟机栈, 程序计数器, 堆区, 和方法区. 前3个是随线程生而生, 随线程灭而灭. 所以垃圾回收需要考虑的是<strong>堆区</strong>和<strong>方法区</strong>.</p></li><li><p>jvm根据什么方法判断一个对象是否该被回收</p></li></ol><ul><li><p><strong>引用计数法</strong>: 这是垃圾收集器中的早期策略. 即堆中的每个对象都有一个引用计数, 当一个对象被创建时, 该变量计数为1, 当把该对象分配给另一个引用时, 该数值加1. 当一个对象实例的引用超过生命周期或者设置为新值时, 计数器减1. 当一个实例对象被垃圾回收时, 它所有的引用都减1(如Person里有Address, ShoppingProfile等对象, Person如果被垃圾回收器回收, 那么Address和ShoppingProfile的引用也要相应减1). </p><p><strong>优缺点</strong>: 执行速度快, 但是无法检测出循环引用, 如如父对象引用子对象, 而子对象反过来对父对象也有引用.这样他们的引用计数永远不可能为0.</p></li><li><p><strong>可达性分析算法</strong>: 该算法将所有节点的引用关系看成是一张图, 从一个节点GC Roots开始, 寻找对应的引用节点. 以此类推. 直到找到所有的引用. 无用的节点就被视为可回收的对象. 对于那些不可达的对象, 也并不是”非死不可”, 除了可达性标记之外, 还要看finalize 中是否重新与引用链建立联系.</p><p>GC Roots的对象包括以下几种: </p><ul><li><p><strong>虚拟机栈中引用的对象;</strong></p></li><li><p><strong>方法区中静态属性引用的对象;</strong></p></li><li><p><strong>方法区中常量引用的对象;</strong></p></li><li><p><strong>本地方法栈中JNI(Native方法)引用的对象</strong></p></li></ul></li></ul><h2 id="JVM对象的引用类型"><a href="#JVM对象的引用类型" class="headerlink" title="JVM对象的引用类型"></a>JVM对象的引用类型</h2><p>不同对象的引用, GC会采用不同的方法进行回收, JVM的对象引用分为了四种类型</p><ul><li><p><strong>强引用(strongreference)</strong>, (如Object obj = new Object();)只要object的引用还存在, 垃圾回收器永远不会对其进行回收.</p></li><li><p><strong>软引用</strong>(softreference), 系统将要发生内存异常之前, 会对该部分进行回收, 如果这次回收还没有足够的内存, 才会抛出内存溢出</p></li><li><p><strong>弱引用</strong>(weekreference), 强度比软引用还要低一点, <strong>只能生存到下一次垃圾回收之前, 无论有无足够内存, 都会将其回收</strong></p></li><li><p><strong>虚引用</strong>(phantomreference), 最弱的一种引用关系, 无法通过虚引用来获取一个对象的实例, 他的作用就是该对象被GC回收时, 收到一个通知. </p></li></ul><p>注: <strong>可达性算法</strong>和<strong>引用计数法</strong>都是基于<strong>强引用</strong>而言的.</p><p>方法判断是否要回收(同时满足以下3个条件):</p><ul><li><p>方法<strong>所属类</strong>的所有实例已被回收</p></li><li><p>加载该类的<strong>classloader</strong> 已被回收</p></li><li><p>该类对应的java.lang.<strong>Class对象没有在任何地方被引用</strong>, 无法在任何地方通过反射访问该类的方法.</p></li></ul><h2 id="jvm优化"><a href="#jvm优化" class="headerlink" title="jvm优化"></a>jvm优化</h2><ul><li><p>几个关键的参数配置</p><p>-Xms、 -Xmx 、-Xmn 、-XX:SurvivorRatio、-XX:MaxTenuringThreshold、-XX:PermSize、-XX:MaxPermSize</p><ul><li><p><strong>-Xms和-Xmx通常设置为相同的值</strong>, 避免运行时要不断扩展内存, 这个值决定了堆内存能使用的最大的空间大小</p></li><li><p><strong>-Xmn</strong>决定了新生代空间的大小, 新生代Eden, S0, S1三个区域可以通过-<strong>XX:SurvivorRatio</strong>来控制(假如值为4,表示Eden:S0:S1 = 4:3:3)</p></li><li><p><strong>-XX:MaxTenuringThreshold</strong> 控制对象在经过多少次minor GC之后进入老年代，此参数只有在Serial 串行GC时有效。</p></li><li><p>-XX:PermSize、-XX:MaxPermSize 用来控制方法区的大小，通常设置为相同的值</p></li></ul></li><li><p>参数配置的注意事项</p><ul><li><p>避免新生代空间设置过小</p><p>会导致minor GC过于频繁</p><p>可能导致minor GC对象直接进入老年代(因为GC频繁), 触发Full GC</p></li></ul></li><li><p>避免新生代空间设置过大</p><p>老年代变小, Full GC频繁</p><p>minor GC时间大幅增加</p></li></ul><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a><strong>垃圾回收器</strong></h2><p><img src="/2020/03/20/jvm/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8.png" alt="垃圾回收器"> </p><p><font color="#dd0000">注:连线表示可以配合使用; 上面是新生代垃圾收集器, 下面是老年代垃圾收集器</font></p><ul><li><p><strong>Serial</strong>: 针对新生代;采用复制算法;单线程收集, 进行垃圾回收时会停止所有线程, 即”stop the world”; 通过该参数设置-XX:+UseSerialGC</p></li><li><p><strong>ParNew</strong>: 除多线程外和Serial一样;-XX:+UseConcMarkSweepGC, 因为除了serial以外,只有它能与CMS配合使用, 所以在指定使用CMS后, 会默认使用ParNew作为新生代收集器; -XX:UseParNewGC, 强制使用; -XX:ParallelGCThreads, 指定线程数量;</p></li><li><p><strong>Parallel scavenge</strong>: 采用复制算法; 新生代收集器; CMS等其他收集器关注的更多是如何减少”stop the world”的时间; 而parallel scavenge目标则是达到一个可控制的吞吐量. 主要应用于那些对暂停时间没有特别高要求, 即程序主要在后台计算, 而不需要与用户进行过多的交互(如批处理). -XX:MaxGCPauseMillis, 最大停顿时间(停顿时间如果设置短, 会影响吞吐量);  GCTimeRatio, 相当于设置吞吐量大小, 垃圾收集时间占应用程序执行时间的比例的计算方法时: 1/(1 + n), 如设置了GCTimeRatio = 19, 那么比例为5%.</p></li></ul><p><strong>注, 还有一个需要注意的参数是: -XX:+UseAdptiveSizePolicy(使用可调整的大小策略), 如果设置了该参数, 就不用指定一些细节的参数, 如新生代的大小(-Xmn), Eden和survivor区域的比例(-XX:SurvivorRatio), 晋升老年代的年龄(-XX:PretenureSizeThreshold), JVM会自动调整这些参数, 提供合适的吞吐量和停顿时间, 这种调节方式称为GC自适应的调节策略(GC Ergonomics), 这是一种值得推荐的方式:</strong> </p><ul><li><p><strong>设置好内存数据大小(-Xmx)</strong></p></li><li><p><strong>使用”-XX:MaxGCPauseMillis”或”-XX:GCTimeRatio”给JVM设置一个优化目标</strong></p></li><li><p><strong>UseAdptiveSizePolicy, jvm自动调节</strong></p></li></ul><p><strong>Serial old:</strong> </p><p>​    针对老年代; 采用标记整理算法; 单线程收集;</p><p><strong>Parallel old</strong></p><p>​    针对老年代;标记整理算法; 多线程收集;</p><p><strong>CMS</strong></p><p>​    并发标记清理(Concurrent Mark Sweep, CMS); 标记清除算法; 以获取最短停顿时间为目标; 并发收集,低停顿;第一次实现了让垃圾收集线程与用户线程（基本上）同时工作；</p><p>​    “-XX:+UseConcMarkSweepGC”：指定使用CMS收集器；</p><p>CMS收集器运作过程:</p><ul><li><p>初始标记: 仅标记一下GC roots能直接关联到的对象; 速度很快, 但需要”stop the world”</p></li><li><p>并发标记: (CMS concurrent mark), 进行GC Roots Tracing的过程; 标记集合中存活对象; 不会停止程序; 并不能保证标记出所有的存活对象;</p></li><li><p>重新标记: 为了修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录; 需要”stop the world”, 停顿时间比初始标记时间长, 比并发标记短;</p></li><li><p>并发清除: 回收所有的垃圾对象(不stop the world)</p></li></ul><p><strong>G1</strong></p><p>JDK7-u4才推出的商用收集器; </p><p><strong>并发与并行</strong>; </p><p><strong>分代收集</strong>;</p><p><strong>可预测的停顿,停顿的同时实现高吞吐量;</strong></p><p>-XX:+UseG1GC, 指定使用G1收集器；</p><p>“-XX:InitiatingHeapOccupancyPercent”：当整个Java堆的占用率达到参数值时，开始并发标记阶段；默认为45；</p><p>​      “-XX:MaxGCPauseMillis”：为G1设置暂停时间目标，默认值为200毫秒；</p><p>​      “-XX:G1HeapRegionSize”：设置每个Region大小，范围1MB到32MB；目标是在最小Java堆时可以拥有约2048个Region；</p><p>1) 初始标记</p><p>2) 并发标记</p><p>3) 最终标记</p><p>为了修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录；</p><p> 上一阶段对象的变化记录在线程的Remembered Set Log；</p><p>  这里把Remembered Set Log合并到Remembered Set中；</p><p>4) 筛选回收</p><p>首先排序各个Region的回收价值和成本；</p><p>然后根据用户期望的GC停顿时间来制定回收计划；</p><p>最后按计划回收一些价值高的Region中垃圾对象；</p><h2 id="持续更新-注"><a href="#持续更新-注" class="headerlink" title="持续更新(注)"></a>持续更新(注)</h2><p>该篇blog并不代表该知识点的所有内容, 在今后的工作学习中, <strong><font color="#dd0000">持续更新</font></strong>! 如对blog中的观点有异议/建议,请发送email至: <span class="exturl" data-url="bWFpbHRvOnNoY2hhb3NodWFpQGZveG1haWwuY29t" title="mailto:shchaoshuai@foxmail.com">shchaoshuai@foxmail.com<i class="fa fa-external-link"></i></span>, 感谢您的阅读.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jvm基础&quot;&gt;&lt;a href=&quot;#jvm基础&quot; class=&quot;headerlink&quot; title=&quot;jvm基础&quot;&gt;&lt;/a&gt;jvm基础&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;jvm和hotspot关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;hot
      
    
    </summary>
    
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>algorithm-search</title>
    <link href="http://yoursite.com/2020/03/16/algorithm-search/"/>
    <id>http://yoursite.com/2020/03/16/algorithm-search/</id>
    <published>2020-03-16T09:28:08.000Z</published>
    <updated>2020-03-21T05:19:04.340Z</updated>
    
    <content type="html"><![CDATA[<h2 id="无序链表实现的无序字符表"><a href="#无序链表实现的无序字符表" class="headerlink" title="无序链表实现的无序字符表"></a>无序链表实现的无序字符表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ST is short for "symbol search"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequentialSearchST</span>&lt;<span class="title">Key</span>, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node first;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        Key key;</span><br><span class="line">        Value val;</span><br><span class="line">        Node next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value val, Node next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(x.key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> x.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Node x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(x.key)) &#123;</span><br><span class="line">                x.val = val;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        first = <span class="keyword">new</span> Node(key, val, first);</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"argument to delete() is null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        first = delete(first, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">delete</span><span class="params">(Node x, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key.equals(x.key)) &#123;</span><br><span class="line">            length--;</span><br><span class="line">            <span class="keyword">return</span> x.next;</span><br><span class="line">        &#125;</span><br><span class="line">        x.next = delete(x.next, key);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        List&lt;Key&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Node x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">            list.add(x.key);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于有序数组的二分查找实现有序字符表"><a href="#基于有序数组的二分查找实现有序字符表" class="headerlink" title="基于有序数组的二分查找实现有序字符表"></a>基于有序数组的二分查找实现有序字符表</h2><p>查找速度比较快, 但是不适合在构造庞大符号表的同时能够支持高效的查找和插入两种操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearchST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Key[] keys;</span><br><span class="line">    <span class="keyword">private</span> Value[] vals;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinarySearchST</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        keys = (Key []) <span class="keyword">new</span> Comparable[capacity];</span><br><span class="line">        vals = (Value []) <span class="keyword">new</span> Comparable[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>, high = length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> compare = key.compareTo(keys[mid]);</span><br><span class="line">            <span class="keyword">if</span> (compare &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">if</span> (compare &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = rank(key);</span><br><span class="line">        <span class="keyword">if</span> (index &lt; length &amp;&amp; keys[index].compareTo(key) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> vals[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = rank(key);</span><br><span class="line">        <span class="keyword">if</span> (index &lt; length &amp;&amp; keys[index].compareTo(key) == <span class="number">0</span>) &#123;</span><br><span class="line">            vals[index] = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = length; j &gt; index; j--) &#123;</span><br><span class="line">            keys[j] = keys[j - <span class="number">1</span>];</span><br><span class="line">            vals[j] = vals[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        keys[index] = key;</span><br><span class="line">        vals[index] = value;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"argument to delete() is null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = rank(key);</span><br><span class="line">        <span class="keyword">if</span>(index == length || keys[index].compareTo(key)!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = index; j &lt; length - <span class="number">1</span>; j++)&#123;</span><br><span class="line">            keys[j]=keys[j+<span class="number">1</span>];</span><br><span class="line">            vals[j]=vals[j+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        length--;</span><br><span class="line">        keys[length]=<span class="keyword">null</span>;</span><br><span class="line">        vals[length]=<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序查找-无序链表-和二分查找比较"><a href="#顺序查找-无序链表-和二分查找比较" class="headerlink" title="顺序查找(无序链表)和二分查找比较"></a>顺序查找(无序链表)和二分查找比较</h2><p><img src="/2020/03/16/algorithm-search/%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE%E5%92%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%AF%94%E8%BE%83.png" alt="顺序查找和二分查找"></p><h2 id="持续更新-注"><a href="#持续更新-注" class="headerlink" title="持续更新(注)"></a>持续更新(注)</h2><p>该篇blog并不代表该知识点的所有内容, 在今后的工作学习中, <strong><font color="#dd0000">持续更新</font></strong>! 如对blog中的观点有异议/建议,请发送email至: <span class="exturl" data-url="bWFpbHRvOnNoY2hhb3NodWFpQGZveG1haWwuY29t" title="mailto:shchaoshuai@foxmail.com">shchaoshuai@foxmail.com<i class="fa fa-external-link"></i></span>, 感谢您的阅读.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;无序链表实现的无序字符表&quot;&gt;&lt;a href=&quot;#无序链表实现的无序字符表&quot; class=&quot;headerlink&quot; title=&quot;无序链表实现的无序字符表&quot;&gt;&lt;/a&gt;无序链表实现的无序字符表&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;t
      
    
    </summary>
    
    
    
      <category term="algorithm, search, 算法, 搜索" scheme="http://yoursite.com/tags/algorithm-search-%E7%AE%97%E6%B3%95-%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>algorithm-sort</title>
    <link href="http://yoursite.com/2020/03/10/algorithm-sort/"/>
    <id>http://yoursite.com/2020/03/10/algorithm-sort/</id>
    <published>2020-03-10T02:12:10.000Z</published>
    <updated>2020-03-16T03:12:07.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="衡量算法的指标"><a href="#衡量算法的指标" class="headerlink" title="衡量算法的指标"></a>衡量算法的指标</h2><ol><li><strong>时间复杂度</strong>: 执行这个算法需要消耗的时间</li><li><strong>空间复杂度</strong>: 这个算法需要占用多少内存空间</li><li><strong>稳定性</strong>: 假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的；否则称为不稳定的.</li><li><strong>In-place</strong>是指不占用额外内存, <strong>Out-place</strong>需要占用额外内存.</li></ol><h2 id="十大排序算法比较"><a href="#十大排序算法比较" class="headerlink" title="十大排序算法比较"></a>十大排序算法比较</h2><p><img src="/2020/03/10/algorithm-sort/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.png" alt="算法复杂度"></p><ul><li><p>冒泡排序, 选择排序, 插入排序, 希尔排序, 归并排序, 快速排序, 堆排序都属于<strong>比较排序</strong></p><ul><li>比较排序的优势是, 适用于各种规模的数据, 也不在乎数据的分布, 都能进行排序</li></ul></li><li><p>计数排序, 桶排序, 基数排序属于<strong>非比较排序</strong> </p><ul><li>非比较排序只要确定每个元素之前的已有的元素个数即可, 所有一次遍历即可解决。算法时间复杂度O(n), 但需要占用空间来确定唯一位置. 所以对数据规模和数据分布有一定的要求.</li></ul></li></ul><h2 id="Bubble-sort-冒泡排序"><a href="#Bubble-sort-冒泡排序" class="headerlink" title="Bubble sort(冒泡排序)"></a>Bubble sort(冒泡排序)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer [] arr = &#123;<span class="number">18</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">33</span>, <span class="number">46</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sort a comparable array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a the comparable array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i].compareTo(a[j]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    exch(a, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> min)</span> </span>&#123;</span><br><span class="line">        Comparable temp = a[i];</span><br><span class="line">        a[i] = a[min];</span><br><span class="line">        a[min] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Selection-sort-选择排序"><a href="#Selection-sort-选择排序" class="headerlink" title="Selection sort(选择排序)"></a>Selection sort(选择排序)</h2><p>选择排序, 对于长度为N的数组, 需要1 + 2 + … + (N-1) = N(N-1)/2 约等于N<sup>2</sup>/2次比较, 需要N次交换.</p><p>选择排序的步骤:</p><ol><li>从第一个元素开始逐个和后面的元素比较, 然后找到最小元素的下标.</li><li>交换当前元素和最小元素. </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注:之后所有的排序都使用该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer [] arr = &#123;<span class="number">18</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">33</span>, <span class="number">46</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sort a comparable array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a the comparable array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j].compareTo(a[min]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            exch(a, i, min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注:之后所有的排序都使用该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> min)</span> </span>&#123;</span><br><span class="line">        Comparable temp = a[i];</span><br><span class="line">        a[i] = a[min];</span><br><span class="line">        a[min] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注:之后所有的排序都使用该方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Inserting-sort-插入排序"><a href="#Inserting-sort-插入排序" class="headerlink" title="Inserting sort(插入排序)"></a>Inserting sort(插入排序)</h2><p>插入排序最坏需要进行N<sup>2</sup>/2次比较和N<sup>2</sup>/2次交换. 最好情况是只需要进行N - 1次比较和0次交换.</p><p><strong>注:  适合接近有序的数组进行排序, 类似于打扑克抓牌的过程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sort a comparable array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a the comparable array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[j].compareTo(a[j-<span class="number">1</span>]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    exch(a, j, j - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shell-sort-希尔排序"><a href="#Shell-sort-希尔排序" class="headerlink" title="Shell sort(希尔排序)"></a>Shell sort(希尔排序)</h2><p><strong>希尔排序是对插入排序的一种改进</strong>(减少了元素的移动). 希尔排序的思想是使数组中任意间隔为h的元素都是有序的.它权衡了数组的规模和有序性.</p><p>该算法主要是, h的选择.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sort a comparable array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a the comparable array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = a.length;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(h &lt; length/<span class="number">3</span>) &#123;</span><br><span class="line">            h = <span class="number">3</span>*h + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h; j-=h) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[j].compareTo(a[j-h]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        exch(a, j, j - h);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            h = h/<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Merge-sort-归并排序"><a href="#Merge-sort-归并排序" class="headerlink" title="Merge sort(归并排序)"></a>Merge sort(归并排序)</h2><p>归并排序将数组分成两个子数组分别排序, 并将有序的子数组归并以将整个数组排序;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer [] arr = &#123;<span class="number">18</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">33</span>, <span class="number">46</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sort a comparable array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a the comparable array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (high &lt;= low) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = low + (high - low)/<span class="number">2</span>;</span><br><span class="line">        sort(a, low, mid);</span><br><span class="line">        sort(a, mid + <span class="number">1</span>, high);</span><br><span class="line">        merge(a, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = low, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = low; k &lt;= high; k++) &#123;</span><br><span class="line">            aux[k] = a[k];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = low; k &lt;= high; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; high) &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aux[j].compareTo(aux[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> min)</span> </span>&#123;</span><br><span class="line">        Comparable temp = a[i];</span><br><span class="line">        a[i] = a[min];</span><br><span class="line">        a[min] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Quick-sort-快速排序"><a href="#Quick-sort-快速排序" class="headerlink" title="Quick sort(快速排序)"></a>Quick sort(快速排序)</h2><p>快速排序和归并排序是互补的, 快速排序是一种分治的排序算法, 它将一个数组分成两个子数组, 将两部分独立地排序; 当两个子数组都有序时整个数组也就自然有序了.</p><p>注: 此排序的关键是partition方法, 找到partition值. partition必须满足</p><ul><li><strong>左边的元素都小于等于partition值</strong>; </li><li><strong>右边的元素都大于等于partition值</strong>;</li></ul><p>查找的方法是从左边扫描比partition大的值,从数组尾部扫描比partition小的值, 然后交换;</p><p><strong>快速排序的优化:</strong></p><ul><li><strong>对于小数组来说, 快速排序不如插入排序, 所以当数组比较少时, 可以切换到插入排序</strong></li><li><strong>迪杰斯特拉的”三向切分的快速排序”</strong>(<font color="#dd0000"><strong>TODO</strong></font>)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sort a comparable array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a the comparable array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (high &lt;= low) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j = partition(a, low, high);</span><br><span class="line">        sort(a, low, j);</span><br><span class="line">        sort(a, j+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = low, j = high + <span class="number">1</span>;</span><br><span class="line">        Comparable v = a[low];</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 扫描左右, 检查扫描是否结束并交换元素</span></span><br><span class="line">            <span class="keyword">while</span> (a[++i].compareTo(v) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == high) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (a[--j].compareTo(v) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == low) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            exch(a, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        exch(a, low, j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Heap-sort-堆排序"><a href="#Heap-sort-堆排序" class="headerlink" title="Heap sort(堆排序)"></a>Heap sort(堆排序)</h2><p>堆排序分为两个阶段:</p><ol><li>堆的构造阶段, 将原始数组安排进一个堆中</li><li>下沉阶段, 递减取出所有元素并得出排序结果 </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer [] arr = &#123;<span class="number">18</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">33</span>, <span class="number">46</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sort a comparable array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a the comparable array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = a.length;</span><br><span class="line">        <span class="comment">// 堆的构造</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = length/<span class="number">2</span>; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">            sink(a, k, length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 堆的排序</span></span><br><span class="line">        <span class="keyword">while</span> (length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            exch(a, <span class="number">1</span>, length--);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 取出最大元素</span></span><br><span class="line">            sink(a, <span class="number">1</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 堆的下沉操作, 就是将堆构造成任意一个结点都比他的子节点要大</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a the comparable array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k the number to sink</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(Comparable[] a, <span class="keyword">int</span> k, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span> * k &lt;= length) &#123;</span><br><span class="line">            <span class="comment">// j为左子节点</span></span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span> * k;</span><br><span class="line">            <span class="comment">// 如果左子节点没有越界, 并且左子节点比右子节点小</span></span><br><span class="line">            <span class="comment">// 就选择左右节点中较大的子节点</span></span><br><span class="line">            <span class="keyword">if</span> (j &lt; length &amp;&amp; less(a, j, j+<span class="number">1</span>)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果需要sink的节点比最大的节点还要大, 就退出</span></span><br><span class="line">            <span class="keyword">if</span> (!less(a, k, j)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则就交换两个节点</span></span><br><span class="line">            exch(a, k, j);</span><br><span class="line">            <span class="comment">// 重新获取k的位置进行比较</span></span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[i - <span class="number">1</span>].compareTo(a[j - <span class="number">1</span>]) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable temp = a[i - <span class="number">1</span>];</span><br><span class="line">        a[i - <span class="number">1</span>] = a[j - <span class="number">1</span>];</span><br><span class="line">        a[j - <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Counting-sort-计数排序"><a href="#Counting-sort-计数排序" class="headerlink" title="Counting sort(计数排序)"></a>Counting sort(计数排序)</h2><p>计数排序分为4步骤:</p><ol><li>得到数列的最大值与最小值，并算出差值d</li><li>创建统计数组并计算统计对应元素个数</li><li>统计数组变形，后面的元素等于前面的元素之和</li><li>倒序遍历原始数组，从统计数组找到正确位置，输出到结果数组</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountingSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] arr = &#123;<span class="number">18</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">33</span>, <span class="number">46</span>&#125;;</span><br><span class="line">        print(sort(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sort a comparable array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array the comparable array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">        <span class="comment">//1.得到数列的最大值与最小值，并算出差值d</span></span><br><span class="line">        <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> min = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] &gt; max) &#123;</span><br><span class="line">                max = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &lt; min) &#123;</span><br><span class="line">                min = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> d = max - min;</span><br><span class="line">        <span class="comment">//2.创建统计数组并计算统计对应元素个数</span></span><br><span class="line">        <span class="keyword">int</span>[] countArray = <span class="keyword">new</span> <span class="keyword">int</span>[d + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            countArray[array[i] - min]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.统计数组变形，后面的元素等于前面的元素之和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countArray.length; i++) &#123;</span><br><span class="line">            sum += countArray[i];</span><br><span class="line">            countArray[i] = sum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.倒序遍历原始数组，从统计数组找到正确位置，输出到结果数组</span></span><br><span class="line">        <span class="keyword">int</span>[] sortedArray = <span class="keyword">new</span> <span class="keyword">int</span>[array.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            sortedArray[countArray[array[i] - min] - <span class="number">1</span>] = array[i];</span><br><span class="line">            countArray[array[i] - min]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sortedArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bucket-sort-桶排序"><a href="#Bucket-sort-桶排序" class="headerlink" title="Bucket sort(桶排序)"></a>Bucket sort(桶排序)</h2><p>桶排序步骤:</p><ol><li>找出数组最大值, 得到桶的数量</li><li>把数字出现的次数放入对应数组中</li><li>打印次数大于0的数组元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BucketSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] arr = &#123;<span class="number">18</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">33</span>, <span class="number">46</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sort a comparable array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr the comparable array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数组的最大值, 来定义bucket的个数</span></span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            max = Math.max(max, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 统计每个元素出现的次数</span></span><br><span class="line">        <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[max + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            bucket[arr[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历桶中大于0的元素</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bucket.length; j++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (bucket[j]-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                arr[i++] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Radix-sort-基数排序"><a href="#Radix-sort-基数排序" class="headerlink" title="Radix sort(基数排序)"></a>Radix sort(基数排序)</h2><p>基数排序的步骤:</p><ol><li>求出数组中所有数据的最大位数</li><li>循环按照每位上的数据进行排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadixSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] arr = &#123;<span class="number">18</span>, <span class="number">23</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">25</span>, <span class="number">33</span>, <span class="number">46</span>, <span class="number">189</span>, <span class="number">389</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sort a int array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr the int array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//count数组用来计数</span></span><br><span class="line">        <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="comment">// bucket用来当桶（在下面你就理解了什么是桶了），放数据，取数据</span></span><br><span class="line">        <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> digits = getMaxDigits(arr);</span><br><span class="line">        <span class="comment">// k表示第几位，1代表个位，2代表十位，3代表百位</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= digits; k++) &#123;</span><br><span class="line">            <span class="comment">// 把count置空，防止上次循环的数据影响</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                count[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分别统计第k位是0,1,2,3,4,5,6,7,8,9的数量</span></span><br><span class="line">            <span class="comment">// 以下便称为桶</span></span><br><span class="line">            <span class="comment">// 即此循环用来统计每个桶中的数据的数量</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> value : arr) &#123;</span><br><span class="line">                count[getFigure(value, k)]++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 利用count[i]来确定放置数据的位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length;i++) &#123;</span><br><span class="line">                count[i] = count[i] + count[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行完此循环之后的count[i]就是第i个桶右边界的位置</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 利用循环把数据装入各个桶中，注意是从后往前装</span></span><br><span class="line">            <span class="comment">// 这里是重点，一定要仔细理解</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = getFigure(arr[i], k);</span><br><span class="line">                bucket[count[j] - <span class="number">1</span>] = arr[i];</span><br><span class="line">                count[j]--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将桶中的数据取出来，赋值给arr</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; arr.length; i++, j++) &#123;</span><br><span class="line">                arr[i] = bucket[j];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数组中数字的最大位数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxDigits</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxDigits = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> value : a) &#123;</span><br><span class="line">            <span class="keyword">int</span> digits = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (value / (<span class="keyword">int</span>) (Math.pow(<span class="number">10</span>, digits)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                digits++;</span><br><span class="line">            &#125;</span><br><span class="line">            maxDigits = Math.max(maxDigits, digits);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxDigits;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此函数返回整型数i的第k位是什么</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFigure</span><span class="params">(<span class="keyword">int</span> value, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value / (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, k - <span class="number">1</span>) % <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十大排序应用场景"><a href="#十大排序应用场景" class="headerlink" title="十大排序应用场景"></a>十大排序应用场景</h2><ol><li>若n较小(如n≤50)，可采用直接插入或直接选择排序。<ul><li>当记录规模较小时，直接插入排序较好, 因为当数组基本有序时, 直接插入移动次数较少; 否则应选择Selection sort为宜.</li></ul></li><li>若文件初始状态`基本有序(指正序), 则应选用插入排序, 冒泡或随机的快速排序为宜</li><li>若n较大，则应采用时间复杂度为O(nlgn)的排序方法:<strong>快速排序</strong>, <strong>堆排序</strong>或<strong>归并排序</strong><ul><li>快速排序是目前基于比较的内部排序中被认为是最好的方法,当待排序的关键字是随机分布时, 快速排序的平均时间最短.</li><li>堆排序所需的辅助空间少于快速排序, 并且不会出现快速排序可能出现的最坏情况. 但这两种排序都是不稳定的.</li><li>若要求排序稳定, 则可选用归并排序. 但从单个记录起进行两两归并的排序算法并不值得提倡, 通常可以将它和直接插入排序结合在一起使用. 先利用直接插入排序求得较长的有序子序列, 然后再两两归并之. 因为直接插入排序是稳定的, 所以改进后的归并排序仍是稳定的</li></ul></li></ol><h2 id="持续更新-注"><a href="#持续更新-注" class="headerlink" title="持续更新(注)"></a>持续更新(注)</h2><p>该篇blog并不代表该知识点的所有内容, 在今后的工作学习中, <strong><font color="#dd0000">持续更新</font></strong>! 如对blog中的观点有异议/建议,请发送email至: <span class="exturl" data-url="bWFpbHRvOnNoY2hhb3NodWFpQGZveG1haWwuY29t" title="mailto:shchaoshuai@foxmail.com">shchaoshuai@foxmail.com<i class="fa fa-external-link"></i></span>, 感谢您的阅读.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;衡量算法的指标&quot;&gt;&lt;a href=&quot;#衡量算法的指标&quot; class=&quot;headerlink&quot; title=&quot;衡量算法的指标&quot;&gt;&lt;/a&gt;衡量算法的指标&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;时间复杂度&lt;/strong&gt;: 执行这个算法需要消耗的时间&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="十大排序算法, 排序, sort, 冒泡排序, 选择排序, 插入排序, 希尔排序, 归并排序, 快速排序, 堆排序, 计数排序, 桶排序, 基数排序" scheme="http://yoursite.com/tags/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F-sort-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-%E5%A0%86%E6%8E%92%E5%BA%8F-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F-%E6%A1%B6%E6%8E%92%E5%BA%8F-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch</title>
    <link href="http://yoursite.com/2020/03/09/ElasticSearch/"/>
    <id>http://yoursite.com/2020/03/09/ElasticSearch/</id>
    <published>2020-03-09T07:47:53.000Z</published>
    <updated>2020-03-24T23:14:06.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES-vs-Solr"><a href="#ES-vs-Solr" class="headerlink" title="ES vs Solr"></a>ES vs Solr</h2><ul><li><p>对已有数据进行搜索,Solr更快</p></li><li><p>实时建立索引时,solr会发生阻塞,ES具有明显的优势</p></li><li><p>随着数据量的增加,Solr的效率会变低,而ES没有明显的变化</p></li><li><p>Solr利用ZK进行分布式管理,而ES自身带有分布式协调管理功能</p></li><li><p>Solr支持的数据格式更多,ES只支持JSON</p></li><li><p>ES是对Lucene进行封装, 用restful的形式去调用, 同时还考虑了海量数据, 实现了分布式, 是一个可以存储海量数据的分布式搜索引擎;</p></li></ul><h2 id="分析文档"><a href="#分析文档" class="headerlink" title="分析文档"></a><strong>分析文档</strong></h2><ol><li><p>分析文档主要是对Field域进行分析,分析文档的目的是为了索引</p></li><li><p>分析文档主要通过分词组件(Tokenizer)和语言处理组件(Linguistic Processor)完成</p><p><strong>分词组件</strong></p><ul><li><p>将Field域中的内容进行分词(不同语言有不同的分词规则)</p></li><li><p>去除标点符号</p></li><li><p>去除停用词(stop word)</p></li><li><p><strong>分词(Tokenize)</strong>之后得到的结果成为词元(<strong>Token</strong>), 对于每一种语言的分词组件(<strong>Tokenizer</strong>)都有一个停词(stop word)集合, the, a, this等</p></li></ul><p><strong>将得到的词元传递给语言处理组件(Linguistic Processor),语言处理组件一般做以下几点:</strong></p><ul><li><p>变为小写(lowercase)</p></li><li><p>将单词缩减为词根形式, 如cars到car, 这种操作称为stemming</p></li><li><p>将单词转变为词根形式, 如drove到drive等, 这种操作称为lemmatization </p></li></ul><p><strong>语言处理组件得到的结果称为term</strong></p></li></ol><h2 id="索引文档"><a href="#索引文档" class="headerlink" title="索引文档"></a><strong>索引文档</strong></h2><ol><li><p>索引的目的是为了搜索</p></li><li><p>将得到的term传给<strong>索引(Indexer)组件</strong>, 索引组件主要做以下几件事情:</p><ul><li><p>创建term字典</p></li><li><p>排序term字典</p></li><li><p>合并term字典(合并相同的词成为文档倒排链表)</p></li><li><p>最终的索引结构是一种<strong>倒排索引结构</strong>也叫<strong>反向索引结构</strong>, 包括索引和文档两部分, 索引即词汇表,它的规模较小, 而文档集合较大</p></li></ul></li></ol><h2 id="ES的高可用"><a href="#ES的高可用" class="headerlink" title="ES的高可用"></a><strong>ES的高可用</strong></h2><ul><li><p>Master-slave架构, master负责集群状态信息的改变, 并同步给其他slave节点, ES会对数据进行拆分, 每一个分片(shards)会保存多个副本;</p></li><li><p>只有建立索引和类型(表)会通过master, 数据的写入有个routing规则, 可以route集群, 所以数据写入的压力是分散在整个集群的;</p></li><li><p>实际应用如(ELK), elasticsearch + logstash(日志收集系统) + kibana(数据可视化平台), 当集群中节点有上百个结点时, 排查日志肯定不能一个一个登录去看, 这时候logstash就起作用了. 还能对错误进行实时报警;</p></li></ul><h2 id="ES倒排索引"><a href="#ES倒排索引" class="headerlink" title="ES倒排索引"></a><strong>ES倒排索引</strong></h2><p>最直白的理解, 就是我们之前背诵诗是背诵题目, 然后是诗的内容. 但是如诗词大会飞花令直接背诵包含某个字如”雪”, “风”的诗却很难想起来. 倒排索引就是以诗中的每个字,作为索引. poem{name: <strong>keyword</strong>, author: <strong>keyword</strong>, dynasty: <strong>keyword</strong>, content: <strong>text</strong>}</p><p><img src="/2020/03/09/ElasticSearch/ES%E7%BB%93%E6%9E%84.png" alt="ES倒排索引"></p><h2 id="ES的Analyzer"><a href="#ES的Analyzer" class="headerlink" title="ES的Analyzer"></a><strong>ES的Analyzer</strong></h2><p>shopstyle主要是对fts的搜索, index时把productName, retailerName, category tag, brand name, material, color, description等信息copy到fts_text字段中; 然后通过自定义的<strong>analyzer(索引时应用的分析器)</strong> 和<strong>search_analyzer(搜索时用的分析器)</strong>进行索引和查询.</p><p>自定义<strong>analyzer</strong>分三个功能:</p><ul><li><p><strong>char_filter(0个或多个)</strong>: 分词前对对字符串进行按字符进行过滤; char_filter 也可以自定义, 共有三种类型自定义的char_filter, “char_filter”:{“<strong>my_char_filter</strong>”{“type”: “<strong>mapping</strong>”, “<strong>mappings</strong>”:[“curry =&gt; 库里”]}}, 除此之外还有<strong>pattern</strong>(正则)过滤, 和<strong>html strip filter</strong></p></li><li><p><strong>tokenizer</strong>(分词器, 有且只有一个): 接收字符流, 输出token流. 有十几种. shopstyle使用了<strong>classic</strong>, <strong>a.</strong> 分割”符号+空格” <strong>b.</strong> 拆分连字符, 除token中有一个数字, 这种情况下, token被翻译为产品编号. <strong>c.</strong>把email和 hostname当做一个token; 还使用了<strong>keyword</strong>的tokenizer, 不会被拆分;</p></li><li><p><strong>token filter(0个或多个)</strong>: token过滤器, 有 lowercase token filter(转小写), stop token filter(删除停用词), 自定义 filter, 继承TokenFilter类,  </p></li></ul><h2 id="ES优化"><a href="#ES优化" class="headerlink" title="ES优化"></a><strong>ES优化</strong></h2><ul><li><p>ssd硬盘</p></li><li><p>routing</p></li><li><p>分别查询和合并查询</p></li><li><p>避免使用range查询</p></li><li><p>JVM GC的选择</p></li></ul><p><strong>ES优化问题:</strong></p><ul><li><p>第一次搜索的时候，是5~10s，后面反而就快了，可能就几百毫秒?</p><p>往ES里index的数据, 实际上都是写到磁盘文件中去了, 查询的时候操作系统会将磁盘文件里的数据自动缓存到FileSystem Cache里面去.ES严重依赖这个cache, 所以FileSystemCache分配的内存要占到机器内存的一半.</p></li><li><p>只有需要搜索的字段再index到ES中(当然必须包括id), 查出来id之后再去其他数据库中查完整的数据.</p></li><li><p>如果数据量实在太大, FileSystem Cache无论如何也容纳不了一半的数据, 那么就需要<strong>数据预热</strong>, 对热门搜索要定时刷到cache中.</p></li><li><p><strong>冷热分离</strong>. 热门搜索数据要放到不同的机器上.</p></li><li><p><strong>避免</strong>join/nested/parent-child搜索, 能在代码中完成尽量在代码中完成</p></li><li><p><strong>减少分页</strong>, 使用<strong>Scroll API</strong>代替(正常ES会维护之前翻页的上下文信息, 但是不能维护时间太长,浪费资源, 该api会设定一个存储的时间), 或者<strong>search_after</strong>来代替.shopstyle是将scroll调用的api和search的api进行分离. search_after与scroll api很相似, 但是search_after是无状态的. search_after举例:</p><p>首先要理解 search_after 这个功能；<br>例如你现在需要按照id 和 time 进行排序；<br>你获取了第一页的结果后，现在需要获取第二页内容<br>你需要使用第一页最后一条的id 和 time，作为 search_after 的参数chuan传递到查询请求中。<br>下面是样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SearchAfterBuilder searchAfterBuilder = <span class="keyword">new</span> SearchAfterBuilder(); </span><br><span class="line">searchAfterBuilder.setSortValues(<span class="keyword">new</span> Object[]&#123;<span class="string">"上一页的ID"</span>, <span class="string">"上一页的时间"</span>&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="ES索引与搜索"><a href="#ES索引与搜索" class="headerlink" title="ES索引与搜索"></a>ES索引与搜索</h2><h3 id="索引时analyzer顺序"><a href="#索引时analyzer顺序" class="headerlink" title="索引时analyzer顺序"></a>索引时analyzer顺序</h3><ol><li><p>mapping字段中定义的分词器</p></li><li><p>索引设置中命名为”default”的分词器</p></li><li><p>Standard analyzer</p></li></ol><h3 id="查询时analyzer顺序"><a href="#查询时analyzer顺序" class="headerlink" title="查询时analyzer顺序"></a>查询时analyzer顺序</h3><ol><li><p>Full-text query中的分词器</p></li><li><p>定义在mapping字段中的search_analyzer</p></li><li><p>定义在mapping字段中的analyzer</p></li><li><p>索引设置中命名为”default_search”的分词器</p></li><li><p>索引设置中命名为”default”的分词器</p></li><li><p>Standard analyzer</p></li></ol><h2 id="mapping文件中一些参数的设置需要注意的点"><a href="#mapping文件中一些参数的设置需要注意的点" class="headerlink" title="mapping文件中一些参数的设置需要注意的点"></a>mapping文件中一些参数的设置需要注意的点</h2><ul><li><p><strong>copy_to</strong>, 不能通过中间值来复制, 如不能把field1 copy 给field2, 然后再通过field copy给field3. 但是可以同时将field1 copy给field3</p></li><li><p><strong>doc_values</strong>: 如果确定不需要通过该字段进行排序或聚合, 就将该值设置为false. 能节省磁盘空间. text 类型的字段不支持该值(所以如果想让该字段支持排序或聚合, 就应该设置一个innerfield,类型为keyword)</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;mappings&quot;: &#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">  &quot;my_field&quot;: &#123; </span><br><span class="line">&quot;type&quot;: &quot;text&quot;,</span><br><span class="line">&quot;fields**&quot;: &#123;</span><br><span class="line">&quot;keyword&quot;: &#123; </span><br><span class="line">&quot;type&quot;: &quot;**keyword**&quot; &#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>dynamic</strong>: 是否允许动态添加新字段(不在mapping文件中的字段), false(不允许), true(允许), strict(报错)</p></li><li><p><strong>fields</strong>:(multi-field) a string field could be mapped as a <strong>text</strong> field for <strong>full-text search</strong>, and as a <strong>keyword</strong> field for <strong>sorting or aggregations,</strong> 另外一种用途是可以将该字段以两种不同的分词器进行索引</p></li><li><p><strong>normalizer</strong>: 在index和搜索的时候对keyword类型的数据进行normalize处理.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"analysis": &#123;</span><br><span class="line">"normalizer": &#123;</span><br><span class="line">"my_normalizer": &#123;</span><br><span class="line">"type": "custom",</span><br><span class="line">  "filter": ["lowercase", "asciifolding"]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Asciifolding</strong>: 作用是去掉变音符号(如法语)并且能把Unicode字符转化为ASCII来表示.</p></li><li><p>store: 是否存储该字段的原始值.在某些情况下是有用的, 如果你有一个带有标题、日期和一个非常大的内容字段的文档，你可能希望只检索标题和日期，而不必从一个大的源字段中提取这些字段, 如把title和date设置为:store: true.搜索的时候只检索title和date</p><p>GET my_index/_search{</p><p>  “<strong>stored_fields</strong>“: [ “title”, “date” ] }</p></li><li><p><strong>similarity</strong>: 相似度算法, 共有三个值, BM25, classic(tf/idf算法), boolean:当full-text ranking不需要的时候, 并且分数只和是否匹配相关. boolean的similarity会给term一个和query的boost相等的分数.</p></li></ul><h2 id="持续更新-注"><a href="#持续更新-注" class="headerlink" title="持续更新(注)"></a>持续更新(注)</h2><p>该篇blog并不代表该知识点的所有内容, 在今后的工作学习中, <strong><font color="#dd0000">持续更新</font></strong>! 如对blog中的观点有异议/建议,请发送email至: <span class="exturl" data-url="bWFpbHRvOnNoY2hhb3NodWFpQGZveG1haWwuY29t" title="mailto:shchaoshuai@foxmail.com">shchaoshuai@foxmail.com<i class="fa fa-external-link"></i></span>, 感谢您的阅读.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ES-vs-Solr&quot;&gt;&lt;a href=&quot;#ES-vs-Solr&quot; class=&quot;headerlink&quot; title=&quot;ES vs Solr&quot;&gt;&lt;/a&gt;ES vs Solr&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对已有数据进行搜索,Solr更快&lt;/p&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
    
      <category term="分布式, ElasticSearch" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F-ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud</title>
    <link href="http://yoursite.com/2020/01/20/spring-cloud/"/>
    <id>http://yoursite.com/2020/01/20/spring-cloud/</id>
    <published>2020-01-20T08:36:10.000Z</published>
    <updated>2020-01-20T08:36:10.652Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="http://yoursite.com/2020/01/20/redis/"/>
    <id>http://yoursite.com/2020/01/20/redis/</id>
    <published>2020-01-20T07:04:45.000Z</published>
    <updated>2020-04-09T05:44:37.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>高并发下查询一个值，缓存中没有，数据库中也没有，布隆过滤器</p><p><strong>解决方案：</strong></p><ul><li><p>如果数据库中值为空，把空写入缓存即可。</p></li><li><p>也可以把所有的可能存在的key放入到一个大的Bitmap中，查询时通过该Bitmap过滤</p></li></ul><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存中大量数据同时到期，高并发下，所有请求都走向数据库</p><p><strong>解决方案：</strong></p><p>尽量不要把所有缓存都设置在同一时间过期, 通过加锁或者队列只允许一个线程查询数据库和写缓存, 其他线程等待.</p><p>通过加锁或者队列只允许一个线程查询数据库和写缓存，其他线程等待。</p><h2 id="热点缓存（缓存击穿）"><a href="#热点缓存（缓存击穿）" class="headerlink" title="热点缓存（缓存击穿）"></a>热点缓存（缓存击穿）</h2><p>双重检测锁解决热点缓存问题，需要加volatile防止指令重排</p><p>高并发下，一个热点缓存到期，然后去数据库中去取，当还没有放入缓存中时，大量请求过来</p><p><strong>解决方案：</strong></p><ul><li><strong>双重检测锁</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Integer count = redis.get(<span class="string">"key"</span>);</span><br><span class="line"><span class="keyword">if</span> (count == <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="keyword">synchronized</span> &#123;</span><br><span class="line">    count = redis.get(<span class="string">"key"</span>);</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="keyword">null</span>) &#123;</span><br><span class="line">      count = repo.getCount();</span><br><span class="line">      redis.put(<span class="string">"key"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>也可以用redis的setnx互斥锁进行判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (redis.setnx(lockKey, requestId, NX, PX) == <span class="number">1</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存双写一致性"><a href="#缓存双写一致性" class="headerlink" title="缓存双写一致性"></a><strong>缓存双写一致性</strong></h2><p><strong>解决方案：</strong></p><p>延时双删策略, 先更新数据库，再删缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String key,Object data)</span></span>&#123;</span><br><span class="line">  redis.delKey(key);</span><br><span class="line">  db.updateData(data);</span><br><span class="line">  <span class="comment">// 可以将以下两步作为异步处理</span></span><br><span class="line">  Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">  redis.delKey(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a><strong>Redis简介</strong></h2><p>Redis是一种用C语言开发的，高性能的，键值对key-value形式的<strong>noSql</strong>数据库</p><p>支持5种<strong>string</strong>, <strong>hash</strong>, <strong>set</strong>, <strong>list</strong>, 有序集合类型(<strong>sortedset</strong>, 简称zset)等数据类型</p><p>劣势就是存储的数据缺少结构化</p><p>应用场景：</p><ul><li><p>内存数据库（登录信息，购物车信息，用户浏览记录）</p></li><li><p>缓存信息</p></li><li><p>解决分布式架构中的session分离问题</p></li></ul><h2 id="redis常用命令"><a href="#redis常用命令" class="headerlink" title="redis常用命令"></a><strong>redis常用命令</strong></h2><ul><li><p>redis-server</p></li><li><p>redis-client</p></li><li><p>性能测试工具</p><p>redis-benchmark</p><p>redis-benchmark -q(Quiet. Just show query/sec values) -n(default 100000 requests)</p><p>-h <hostname>      Server hostname (default 127.0.0.1)</hostname></p><p> -p <port>          Server port (default 6379)</port></p><p> -s <socket>        Server socket (overrides host and port)</socket></p><p> -a <password>      Password for Redis Auth</password></p><p> -c <clients>       Number of parallel connections (default 50)</clients></p><p> -n <requests>      Total number of requests (default 100000)</requests></p><p> -d <size>          Data size of SET/GET value in bytes (default 2)</size></p><p> -dbnum <db>        SELECT the specified db number (default 0)</db></p><p> -k <boolean>       1=keep alive 0=reconnect (default 1)</boolean></p><p> -r <keyspacelen>   Use random keys for SET/GET/INCR, random values for SADD</keyspacelen></p><p>  Using this option the benchmark will expand the string <strong>rand_int</strong></p><p>  inside an argument with a 12 digits number in the specified range</p><p>  from 0 to keyspacelen-1. The substitution changes every time a command</p><p>  is executed. Default tests use this to hit random keys in the</p><p>  specified range.</p><p> -P <numreq>        Pipeline <numreq> requests. Default 1 (no pipeline).</numreq></numreq></p><p> -q                 Quiet. Just show query/sec values</p><p> –csv              Output in CSV format</p><p> -l                 Loop. Run the tests forever</p><p> -t <tests>         Only run the comma separated list of tests. The test</tests></p><p>​                    names are the same as the ones produced as output.</p><p> -I                 Idle mode. Just open N idle connections and wait.</p></li><li><p>redis-check-aof</p><p>aof文件检查的工具</p></li><li><p>redis-check-dump</p><p>rdb文件进行检查的工具</p></li><li><p>redis-sentinel</p><p>启动哨兵监控服务</p></li></ul><h2 id="redis数据类型及常用操作"><a href="#redis数据类型及常用操作" class="headerlink" title="redis数据类型及常用操作"></a>redis数据类型及常用操作</h2><ul><li><p><strong>string</strong></p><p>set key value, get key, getset key value, incr key(必须为整数), incrby key increment, decr key, decrby increment</p><p>setnx key value, append key value, strlen key, mset key1 value2 key2 value2…, <strong>mget</strong> key1, key2 …</p></li><li><p><strong>hash</strong>散列类型，如(people –&gt; name –&gt; “chris”)</p><p>字段的名只能用string</p><p>hset key field value, hget key field, hmset …, hsetnx key field value(同hset,但是如果field存在，则不执行任何操作),</p><p>hmget 批量取, hdel key, hincrby key field increment, hexists key field, hkeys key, hvals key, hlen key, hgetall key</p></li><li><p><strong>list</strong>类型(链表实现的)</p><p>lpush/rpush, lrange, lpop/rpop, llen, </p><p>lrem key count value</p><p>当count&gt;0时，从左边开始删，删除在count范围内，值为value的元素</p><p>当count&lt;0时，从右边开始删</p><p>当count=0时，删除所有值为value的元素</p><p>lindex, lset key index value, ltrip key start stop, linsert key before|after “specified value” value, rpoplpush,</p></li><li><p><strong>set</strong>类型</p><p>不重复且没有顺序(指放入和取出的顺序不一致)</p><p>sadd,srem key value, smembers key, sismember key value, sdiff A B(A - B), sinter A B(A ∩ B), sunion A B(A ∪ B),</p><p>scard key(获取元素个数),spop(从集合中随机选择一个元素弹出)</p></li><li><p><strong>zset</strong>类型（为每个元素都关联一个分数）</p><p>有序集合和list对比</p><p>相同点: 两者都有序，两者都可以获得某一范围内的元素</p><p>区别: 列表访问两边数据很快, 访问中间数据很慢. 有序集合都很快</p><p>有序列表可以调整元素位置，通过分数实现；</p><p>有序集合耗内存</p><p>zadd key score member, zrange/zrevrange key start stop [withscores],</p><p>zscore key,zrem, zrangebyscore key min max, zincrby key increment member, zcard key(当前集合中元素数量)</p><p>zcount key min max(指定分数范围内元素的个数), zremrangebyrank key start stop, zrank/zrevrank key member</p></li></ul><ul><li><p>通用命令</p><p>keys, del, exists, expire key, ttl key(剩余生存时间), persist key(清除生存时间), </p><p>pexpire key milliseconds(生存时间设置单位为毫秒), rname oldkey newkey, type key, </p></li></ul><h2 id="redis事务介绍-指一组命令的集合"><a href="#redis事务介绍-指一组命令的集合" class="headerlink" title="redis事务介绍(指一组命令的集合)"></a>redis事务介绍(指一组命令的集合)</h2><p>redis使用<strong>multi</strong>, <strong>exec</strong>, <strong>discard</strong>, <strong>watch</strong>, <strong>unwatch</strong>实现事务</p><p>redis不支持事务回滚</p><p>执行multi后，Redis会将命令逐个放入队列中，然后用exce执行这个队列中的命令</p><p>而watch是在multi之前，watch某个属性，表示我这个multi块中可能要修改该属性，如果multi块中的命令在未执行前有客户端修改了该请求，那么该multi块中的命令就会执行失败。</p><h2 id="redis持久化（指的是持久化到磁盘）"><a href="#redis持久化（指的是持久化到磁盘）" class="headerlink" title="redis持久化（指的是持久化到磁盘）"></a><strong>redis持久化</strong>（指的是<strong>持久化到磁盘</strong>）</h2><p>redis持久化的方式有两种，<strong>RDB</strong>和<strong>AOF</strong></p><h3 id="RDB-redis默认方式"><a href="#RDB-redis默认方式" class="headerlink" title="RDB(redis默认方式)"></a>RDB(redis默认方式)</h3><p>rdb是使用快照(snapshotting)的方式进行持久化的</p><h4 id="触发快照的时机"><a href="#触发快照的时机" class="headerlink" title="触发快照的时机"></a><strong>触发快照的时机</strong></h4><ul><li><p>符合自定义的快照规则</p></li><li><p>执行save或者bgsave命令</p><p><strong>注:</strong> save命令是阻塞的，执行bgsave时会fork出一个进程进行保存，非阻塞的</p></li><li><p>执行flushall命令</p><p><strong>注：</strong>线上一般要禁止掉flushall(删除所有数据库的所有 key),flushdb(删除当前数据库的所有key), keys *等命令</p><p>在redis配置文件中添加：</p><p>rename-command FLUSHALL “”  </p><p>rename-command FLUSHDB “”  </p><p>rename-command KEYS “”</p></li><li><p>执行主从复制操作</p></li></ul><p>redis获取所有数据库：</p><p>config get databases(默认有16个数据库，index从0开始)</p><p>select 0选择数据库</p><h4 id="快照规则-或的关系"><a href="#快照规则-或的关系" class="headerlink" title="快照规则(或的关系)"></a>快照规则(或的关系)</h4><p><strong>save 900 1</strong> <strong>“**</strong>15分钟内有1次修改就进行快照<strong>**”</strong></p><p><strong>save 300 10</strong> <strong>“**</strong>5分钟内有10次修改就进行快照<strong>**”</strong></p><p><strong>save 60 10000</strong> <strong>“**</strong>1分钟内有10000次修改就进行快照<strong>**”</strong></p><p>dir ./ 指定快照地址(rdb文件地址)</p><p>dbfilename dump.rdb</p><h4 id="快照过程"><a href="#快照过程" class="headerlink" title="快照过程"></a>快照过程</h4><ol><li><p><strong>Redis调用系统fork函数复制出一份当前进程的副本(子进程)</strong></p></li><li><p><strong>子进程开始将内存中的数据写入到硬盘中的临时文件</strong></p></li><li><p><strong>用临时文件替代旧的rdb文件(经过压缩的二进制文件)</strong></p></li></ol><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul><li><p>缺点: 一旦Redis异常退出，就将丢失最后一次快照后更改的所有数据</p></li><li><p>优点: rdb可以最大化Redis的性能</p></li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>AOF: 每执行一条更改，Redis就会将该命令写入AOF文件. 实际上是<strong>先写入到硬盘缓存，然后通过硬盘缓存刷新机制保存到文件。</strong></p><p><strong>appendfsync always</strong></p><p><strong>appendfsync everysec(默认)</strong></p><p><strong>appendfsync no(由系统进行sync)</strong></p><p>默认关闭，打开是appendonly yes</p><p>在数据量比较大的时候，频繁的写入和修改，aof文件会变得非常臃肿，所以我们可以设置重写规则：</p><ul><li><p>auto-aof-rewrite-min-size：64m</p></li><li><p>auto-aof-rewrite-percentage：100</p></li></ul><h3 id="RDB-和-AOF比较"><a href="#RDB-和-AOF比较" class="headerlink" title="RDB 和 AOF比较"></a>RDB 和 AOF比较</h3><p>RDB持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作过程是<strong>fork一个子进程</strong>，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储。</p><p>AOF持久化以日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录，以文本的方式记录，可以打开文件看到详细的操作记录。</p><h3 id="数据库备份和灾难恢复"><a href="#数据库备份和灾难恢复" class="headerlink" title="数据库备份和灾难恢复"></a>数据库备份和灾难恢复</h3><p>定时生成RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快。</p><p>Redis 支持同时开启 RDB 和 AOF,系统重启后，Redis 会优先使用 AOF 来恢复数据，这样丢失的数据会最少。</p><h3 id="RDB-和-AOF-我应该用哪一个"><a href="#RDB-和-AOF-我应该用哪一个" class="headerlink" title="RDB 和 AOF ,我应该用哪一个"></a>RDB 和 AOF ,我应该用哪一个</h3><p>如果你非常关心你的数据,但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久。</p><p>AOF 将 Redis 执行的每一条命令追加到磁盘中，处理巨大的写入会降低 Redis 的性能，不知道你是否可以接受。</p><h2 id="redis主从复制"><a href="#redis主从复制" class="headerlink" title="redis主从复制"></a>redis主从复制</h2><ul><li><p>只需要在从服务器的配置文件中添加：</p><p>slaveof 192.168.1.123 6379</p></li><li><p>主从复制保证了即使有服务器宕机，也能保证对外提供服务。</p></li><li><p>当进行主从复制时，不会阻塞。</p></li><li><p>一个从服务器也可能是另一台服务器的主</p></li></ul><p>原理：</p><p><strong>分为全量同步和增量同步</strong></p><ul><li><strong>全量同步</strong>是当第一次从服务器连接上主服务器时进行的同步，在全量同步期间，主服务器还会有新的写操作过来，这时候主服务器会把这些操作放入到缓冲区。<ol><li>master创建快照并发送给slave(将此期间的写入放入缓冲区)</li><li>master向slave同步缓冲区的写操作命令</li><li>同步增量阶段</li></ol></li></ul><ul><li><p>增量同步是全量同步之后的一个正常操作的过程</p><p>master每执行一个写操作，都会将该命令发送到slave</p></li></ul><h2 id="redis哨兵机制"><a href="#redis哨兵机制" class="headerlink" title="redis哨兵机制"></a>redis哨兵机制</h2><ul><li><p>redis主从复制的缺点是当有Redis主服务器进行宕机时，不能进行动态的选举。需要<strong>使用Sentinel机制完成动态选举</strong>。</p></li><li><p>因此Sentinel进程的作用：监控master的状态（实际上也可以监控slave），在master宕机之后完成动态的选举。</p></li><li><p>如果有master或者slave宕机，可以通过脚本向管理员发送通知（短信或邮件）。即Monitoring 和 Notification.</p></li></ul><ul><li><p><strong>sentinel动态选举过程</strong>（Automatic failover）：</p><ol><li><p><strong>检测到master出现异常</strong></p></li><li><p><strong>将其中一个slave复制为新的master</strong></p></li><li><p><strong>当有slave请求master时</strong></p></li><li><p><strong>返回新的master地址</strong></p></li></ol><p><strong>注:</strong> master和slave的redis.conf，和sentinel.conf都会发生变化， </p></li><li><p><strong>sentinel故障分析过程</strong></p><ol><li>sentinel会以<strong>每秒1次的频率</strong>发送ping命令到Master, Slave 和 其他Sentinel</li><li>若回复ping命令超时（sentinel.conf文件中指定的down-after-milliseconds）,则该实例会被标记为<strong>SDOWN</strong>(主管下线)</li><li>如果有足够数量(sentinel.conf中指定的)的Sentinel都将该实例标记为SDOWN，则该实例变为<strong>ODOWN</strong></li></ol></li><li><p>监控的主机名称为master，地址和IP，当有2个quorum认为mymaster失联时，则标记为ODOWN</p><p>sentinel monitor mymaster 127.0.0.1 6379 2</p><p>注意：</p><ol><li><p>虽然没有写监控slave，但是slave是被自动检测的</p></li><li><p>虽然指定了ODOWN的数量，但是还是需要大多数的Sentinel同意来开启故障转移</p></li></ol></li></ul><h2 id="sentinel一些配置"><a href="#sentinel一些配置" class="headerlink" title="sentinel一些配置"></a>sentinel一些配置</h2><ul><li><p>port 26379(default)</p></li><li><p>dir /tmp(工作目录)</p></li><li><p>当实例开启了requirepass foobared,需要在sentinel.conf中添加如下配置</p><ul><li><p>sentinel auth-pass <master-name> <password></password></master-name></p></li><li><p>sentinel down-after-milliseconds <master-name> <milliseconds></milliseconds></master-name></p></li><li><p>sentinel parallel-syncs <master-name> <numreplicas> 当master发生故障时，最多有几个slave同时对master进行更新</numreplicas></master-name></p></li></ul></li><li><p>sentinel failover-timeout mymaster 180000（这个超时时间有4种用途）</p><ul><li><p>所有slave对新的master进行更新时所需的最大时间，如果超过这个时间，则parallel-syncs无效，变为一次只能有一个更新</p></li><li><p>同一个Sentinel对同一个master两次failover之间的间隔时间</p></li><li><p>取消一个正在failover的实例所允许的最大时间(取消的前提是配置文件还未发生变化)</p></li><li><p>slave从一个错误的master同步数据到纠正为从正确的master同步数据所需要的最大时间</p></li></ul></li><li><p>脚本</p><ul><li><p>脚本返回1，则会重试，默认重试10次</p></li><li><p>脚本返回值 &gt; 2,不重试</p></li><li><p>脚本执行中中断，则和返回1效果一样</p></li><li><p>当一个脚本执行超过60秒，则会被一个SIGKILL信号终止，然后重试</p></li></ul></li></ul><ul><li><p>通知型脚本</p><p>sentinel notification-script mymaster /var/redis/notify.sh</p><p>当系统有sdown或者ODOWN时会向管理员发送短信或邮件，该通知接收两个参数，事件类型和事件描述</p><p>注：如果配置了该脚本，那么该脚本必须存在且是可执行的，否则无法启动Sentinel</p></li><li><p>客户端重新配置主节点参数脚本</p><p>sentinel client-reconfig-script <master-name> <script-path></script-path></master-name></p><p>当master发生改变，执行该脚本通知客户端主机的新地</p><p>这些参数将会被传递到该脚本：</p><p><master-name> <role> <state> <from-ip> <from-port> <to-ip> <to-port></to-port></to-ip></from-port></from-ip></state></role></master-name></p><p>state 一直是 failover</p><p>role 是 observer或者leader</p><p>from-:老的master的IP和端口号，to-:新的master的IP和端口号</p></li></ul><h2 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h2><h3 id="redis-集群保证了高可用"><a href="#redis-集群保证了高可用" class="headerlink" title="redis 集群保证了高可用"></a><strong>redis 集群保证了高可用</strong></h3><ul><li><p>Redis集群特点</p><p><strong>集群中的各个实例（节点）彼此互联，通过ping-pong机制</strong></p><ul><li><strong>节点失效判断(fail):</strong> <strong>需要集群中所有的master投票, 经过半数以上的节点检测失效时才生效</strong></li></ul></li><li><p>客户端与Redis节点是直连，不需要经过任何代理</p></li><li><p>Redis-cluster把所有物理节点映射到[0-16383]slot上，cluster负责维护node – slot – value</p><p>注：redis集群内置了<strong>16384</strong>个slot，当客户端保存一个key-value时，redis先对key使用<strong>crc16</strong>算法算出一个结果，然后把结果对16384取余，Redis会把16384个slot均等的分配到各个节点上。每个节点都包含了一个各个node的信息</p></li><li><p><strong>集群失效判断</strong></p><ul><li><p>如果集群任意master挂掉，且该master没有slave时。集群挂掉。因为16384个hash槽不完整</p></li><li><p>集群超过半数的master挂掉，不管是否有slave。</p></li></ul></li><li><p><strong><font color="#dd0000">注: 为什么是16384个槽?</font></strong></p><p><strong>(自我描述: redis对一个key进行crc16算法, 产生一个16位(bit)的hash值, 那么该算法可以产生65536个值, 但为什么不是65536个槽, 而是16384个槽呢? 原因有几点:</strong> </p><p><strong>1.</strong> <strong>与Redis的心跳机制有关, redis两个节点在发生心跳的时候, 消息头中包含如myslots[CLUSTER_SLOTS/8], 所以如果发送65536个这样的信息, 就需要65536 * 8 * 1024 = 8K, 太大, 浪费带宽;</strong> </p><p><strong>2.</strong> <strong>实际16384个槽已经足够用, 因为当redis的节点超过1000时, 整个集群的效率会非常低, 会造成网络拥堵. 因此作者建议不要超过1000个节点)</strong></p></li></ul><h3 id="客户端连接集群"><a href="#客户端连接集群" class="headerlink" title="客户端连接集群"></a>客户端连接集群</h3><ul><li><p>./redis-cli -h 127.0.0.1 -p 7001 -c</p></li><li><p>添加新的节点：</p><p>./redis-trib.rb add-node 127.0.0.1:7007 127.0.0.1:7001</p><p>./redis-trib.rb reshard 127.0.0.1:7001(连接上任一节点即可)</p><p>./redis-trib.rb add-node –slave –master-id 主节点id 新节点的IP和端口 旧节点ip和端口（集群中任一节点都可以）</p></li></ul><h2 id="redis实现分布式锁"><a href="#redis实现分布式锁" class="headerlink" title="redis实现分布式锁"></a>redis实现分布式锁</h2><ul><li><p>单应用</p><p>一般用synchronize，ReentrantLock实现锁</p></li><li><p>分布式</p><p>分布式锁注意事项：</p><ul><li><p>互斥性：即在任一时刻只有一个客户端能持有锁</p></li><li><p>同一性：加锁和解锁必须是同一客户端</p></li><li><p>可重入性：即使一个客户端没有主动解锁（崩溃等），也能保证后续其他客户端能加锁（超时时间）</p></li></ul></li><li><p>基于<strong>数据库的乐观锁</strong>实现分布式锁</p></li><li><p>zookeeper临时节点的分布式锁</p></li><li><p>基于<strong>Redis的分布式锁</strong></p><p>使用set key value [ex seconds] [px milliseconds] [NX|XX]</p><p>ex和px都表示过期时间，单位不一样</p><p>NX是在不存在时设置，XX是在存在时设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">(String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">  String result = jedis.set(lockKey, requestId, <span class="string">"NX"</span>, <span class="string">"EX"</span>, expireTime);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"OK"</span>.equals(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>释放锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releaseLock</span><span class="params">(String requestId, String lockKey)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (requestId.equals(jedis.get(lockKey)))  &#123;</span><br><span class="line">    jedis.del(lockKey);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="redis-过期策略"><a href="#redis-过期策略" class="headerlink" title="redis 过期策略"></a>redis 过期策略</h2><ul><li><p><strong>定期删除</strong>+ <strong>惰性删除</strong> + <strong>内存淘汰机制</strong></p><p><strong>定期删除</strong>: Redis默认是每隔100ms就随机抽取一些设置了过期时间的key. 假如redis中有100万个key, 都设置了过期时间,那么肯定不会每隔100毫秒就遍历100万个key然后删除过期了的key. <strong>当get某个key的时候, redis会检测该key有没有过期, 如果过期,就删除, 然后返回空.这就是惰性删除</strong>. 但是内存中如果有10万个key没有被访问到, 不可能让他们长期在内存中消耗内存, 这时候就需要走<strong>内存淘汰机制</strong></p><p>内存淘汰机制: </p><ul><li><p><strong>noeviction</strong>：当内存不足以容纳新写入数据时，新写入操作会报错，这个一般没人用吧</p></li><li><p><strong>allkeys-lru</strong>：当内存不足以容纳新写入数据时，<strong>在键空间中</strong>，移除最近最少使用的key（这个是最常用的）</p></li><li><p><strong>allkeys-random</strong>：当内存不足以容纳新写入数据时，<strong>在键空间中</strong>，随机移除某个key，这个一般没人用吧</p></li><li><p><strong>volatile-lru</strong>：当内存不足以容纳新写入数据时，<strong>在设置了过期时间的键空间中</strong>，移除最近最少使用的key（这个一般不太合适）</p></li><li><p><strong>volatile-random</strong>：当内存不足以容纳新写入数据时，<strong>在设置了过期时间的键空间中</strong>，随机移除某个key</p></li><li><p><strong>volatile-ttl</strong>：当内存不足以容纳新写入数据时，<strong>在设置了过期时间的键空间中</strong>，有更早过期时间的key优先移除</p></li></ul></li></ul><h2 id="redis-cluster对mget的操作"><a href="#redis-cluster对mget的操作" class="headerlink" title="redis cluster对mget的操作"></a><strong>redis cluster对mget</strong>的操作</h2><p>Redis cluster不支持mget操作. 最初是facebook, 2010年使用memcache作缓存, 共有3000个节点. 发现节点太多, 连接频率下降. 继续增加节点, 并没有改善, 是因为IO的成本已经超过数据传输.</p><p>所以redis cluster也因此不支持mget操作.redis引入cluster模式后, 是将数据hash到<strong>16384</strong>个slot上, 每个node负责一部分slot.</p><p><strong>mget优化方案:</strong> </p><ol><li><p>n个key, 传统IO, 分别获取, 时间复杂度为O(n)</p></li><li><p>n个key, 通过Redis的hash算法可以得出各个key所对应的节点, 这样时间复杂度就位O(node.size())</p></li><li><p>在B方案的基础之上并发处理</p></li></ol><h2 id="redis的redlock"><a href="#redis的redlock" class="headerlink" title="redis的redlock"></a>redis的redlock</h2><ul><li><p><strong>redlock的前提是有N个redis的master, 这些节点之间没有主从复制, 或者其他集群协调机制.</strong></p></li><li><p>client从N个节点尝试获取锁, 只要有N/2 + 1个节点获取成功, 那么便获取成功; 如果最终获取失败, 客户端应该在所有的节点上进行解锁. </p></li><li><p>redlock的出发点是为了解决Redis集群环境下, 出现的分布式锁的问题(client1获取锁, master 宕机, slave变成master, client2获取到锁). 但是redlock的出现并没有解决这样的问题.</p></li></ul><p><strong><font color="#dd0000">Martin和Redis作者antirez之间的争辩:</font></strong></p><p>martin挑了两个缺点:</p><p>​    1. 对于提升效率的场景, redlock太重</p><p>​    2. 对于正确性要求极高的场景, redlock并不能保证正确性;</p><p><strong>问题:</strong> 在client1获取锁之后, 由于某种原因发生<strong>系统停顿</strong>, 锁过期, 然后client1执行操作; client2这时候也会拿到锁, 就会出现问题)</p><p><strong>问题:</strong> A, B, C, D, E 5个redis节点,如果C的时间走得快, client1拿到锁(A, B, C), C节点先过期, client2又拿到了(C, D, E)这样就出问题了;</p><p>所以Redis从根本上来说是AP, 而分布式锁是要求CP的.</p><h2 id="redis各种数据类型的数据结构"><a href="#redis各种数据类型的数据结构" class="headerlink" title="redis各种数据类型的数据结构"></a>redis各种数据类型的数据结构</h2><h3 id="Redis的底层数据结构"><a href="#Redis的底层数据结构" class="headerlink" title="Redis的底层数据结构"></a>Redis的底层数据结构</h3><ul><li>简单动态字符串sds(Simple Dynamic String)</li><li>双端链表(LinkedList)</li><li>字典(Map)</li><li>跳跃表(SkipList)</li></ul><h3 id="redis各种数据类型使用的数据结构"><a href="#redis各种数据类型使用的数据结构" class="headerlink" title="redis各种数据类型使用的数据结构"></a>redis各种数据类型使用的数据结构</h3><ul><li><strong>String</strong>, <strong>SDS</strong>(simple dynamic string) 简单动态字符串, 包含len(字符串长度), free(空闲的字节数量), buf(字节数组,存储数据)</li><li><strong>List</strong>, 使用<strong>压缩列表</strong>(数据集比较少的时候, 列表中单个数据小于64字节或者列表中数据个数少于512个)和<strong>双向循环链表</strong>, 包含pre, next, value</li><li><strong>hash</strong>, 使用<strong>压缩列表</strong>(键和值的大小小于64字节, 列表中键值对个数小于512个)和<strong>散列表</strong></li><li><strong>Set</strong>, <strong>有序数组</strong>(个数不超过512)和<strong>散列表</strong></li><li><strong>Zset</strong>, <strong>压缩列表</strong>(数据小于64字节或者个数小于128个)和<strong>跳跃表</strong></li></ul><h3 id="用ziplist代替key-value减少80-内存占用的案例"><a href="#用ziplist代替key-value减少80-内存占用的案例" class="headerlink" title="用ziplist代替key-value减少80%内存占用的案例"></a>用ziplist代替key-value减少80%内存占用的案例</h3><p>​    <strong>背景:</strong> 因业务原因, 需要大量存储key-value数据, key和value都为string, 如果存储1千万条数据，占用了redis共计1.17G的内存. 当数据量变成1个亿时，实测大约占用8个G. 但是修改为key(int), value 为ziplist时, 内存占用为123M, 减少了85%.</p><p>​    <strong>步骤:</strong></p><ol><li><p>要将1千万个键值对, 放到N个bucket中, 但是为了防止ziplist变为hashtable, 每个bucket不能超过512个键值对, 1千万 / 512 = 19531. 将所有key hash到所有bucket中, 但由于hash函数的不确定性, 可能出现不均等分配, 可以分配25000个bucket, 或者30000个bucket.</p></li><li><p>选用hash算法, 决定将key放到哪个bucket. 这里我们采用高效而且均衡的知名算法crc32. 通过获取原有md5(key)的crc32后, 再对bucket的数量进行取余.</p></li><li><p>第2步确定了外层的key, 内部的field我们选用bkdr哈希算法.</p><p>​    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">BKDRHash</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> seed = <span class="number">131</span>;</span><br><span class="line">  <span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    hash = (hash * seed) + str.charAt(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (hash &amp; <span class="number">0X7FFFFFFF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><p>装入1000万条数据, 内存降低了85%; </p><p>查询测试, 查100万条数据, 对比查询速度:</p><p> key-value耗时：10653、10790、11318、9900、11270、11029毫秒</p><p> hash-field耗时：12042、11349、11126、11355、11168毫秒</p></li></ol><h2 id="Redis高延迟原因"><a href="#Redis高延迟原因" class="headerlink" title="Redis高延迟原因"></a>Redis高延迟原因</h2><p>redis命令执行过程</p><p><img src="/2020/01/20/redis/redis%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" alt="redis命令执行过程"></p><p>蓝色的表示可能发生高延迟的地方</p><p>redis提供的慢查询统计功能: slowlog get {n}, 默认返回执行超过10ms(可配置)的命令.</p><ul><li>slowlog-log-slower-than, 配置超过几毫秒的数据被记录到慢查询队列中</li><li>慢查询队列的最大长度: slowlog-max-len</li></ul><p>slowlog get会返回值如下: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; slowlog <span class="built_in">get</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) (integer) <span class="number">26</span> # 在慢日志中的序列号</span><br><span class="line"><span class="number">2</span>) (integer) <span class="number">1450253133</span> # 该记录执行的系统时间</span><br><span class="line"><span class="number">3</span>) (integer) <span class="number">43097</span> # 该记录执行所消耗的时间</span><br><span class="line"><span class="number">4</span>) <span class="string">"flushdb"</span> # 执行的操作</span><br></pre></td></tr></table></figure><p>redis高延迟原因</p><ul><li><p><strong>不合理的命令或者数据结构</strong></p><p>避免使用<strong>hgetall</strong>操作, redis提供发现各种数据结构中大对象的工具, redis-cli-h {ip} -p {port} bigkeys</p></li><li><p><strong>持久化阻塞</strong></p><p>开启了持久化操作的redis, 当执行fork和AOF时会引起阻塞</p><ul><li><p>fork阻塞</p><p>fork 操作发生在 RDB 和 AOF 重写时, Redis 主线程调用 fork 操作产生共享内存的子进程, 由子进程完成对应的持久化工作. 如果 fork 操作本身耗时过长, 必然会导致主线程的阻塞。</p></li><li><p>AOF阻塞</p><p>当我们开启AOF持久化功能时，文件刷盘的方式一般采用每秒一次, 后台线程每秒对AOF文件做 fsync 操作. 当硬盘压力过大时, fsync 操作需要等待，直到写入完成.</p></li><li><p>内存交换</p><p>内存交换(swap)对于 Redis 来说是非常致命的, Redis 保证高性能的一个重要前提是所有的数据在内存中. 如果操作系统把 Redis 使用的部分内存换出到硬盘, 由于内存与硬盘读写速度差几个数量级, 会导致发生交换后的 Redis 性能急剧下降. 识别 Redis 内存交换的检查方法如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;redis-cli -p <span class="number">6383</span> info server | grep process_id # 查询 redis 进程号</span><br><span class="line">&gt;cat /proc/<span class="number">4476</span>/smaps | grep Swap # 查询内存交换大小</span><br><span class="line">Swap: <span class="number">0</span> kB</span><br><span class="line">Swap: <span class="number">4</span> kB</span><br><span class="line">Swap: <span class="number">0</span> kB</span><br><span class="line">Swap: <span class="number">0</span> kB</span><br></pre></td></tr></table></figure><p>如果交换量都是0KB或者个别的是4KB, 则是正常现象, 说明Redis进程内存没有被交换</p><p>有很多方法可以避免内存交换的发生:</p><ul><li>保证机器充足的可用内存</li><li>确保所有Redis实例设置最大可用内存(maxmemory), 防止极端情况下Redis内存不可控的增长</li><li>降低系统使用swap优先级, 如 echo10&gt;/proc/sys/vm/swappiness</li></ul></li></ul></li></ul><h2 id="持续更新-注"><a href="#持续更新-注" class="headerlink" title="持续更新(注)"></a>持续更新(注)</h2><p>该篇blog并不代表该知识点的所有内容, 在今后的工作学习中, <strong><font color="#dd0000">持续更新</font></strong>! 如对blog中的观点有异议/建议,请发送email至: <span class="exturl" data-url="bWFpbHRvOnNoY2hhb3NodWFpQGZveG1haWwuY29t" title="mailto:shchaoshuai@foxmail.com">shchaoshuai@foxmail.com<i class="fa fa-external-link"></i></span>, 感谢您的阅读.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;缓存穿透&quot;&gt;&lt;a href=&quot;#缓存穿透&quot; class=&quot;headerlink&quot; title=&quot;缓存穿透&quot;&gt;&lt;/a&gt;缓存穿透&lt;/h2&gt;&lt;p&gt;高并发下查询一个值，缓存中没有，数据库中也没有，布隆过滤器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p
      
    
    </summary>
    
    
    
      <category term="Redis, 分布式, 缓存" scheme="http://yoursite.com/tags/Redis-%E5%88%86%E5%B8%83%E5%BC%8F-%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>kafka</title>
    <link href="http://yoursite.com/2020/01/19/kafka/"/>
    <id>http://yoursite.com/2020/01/19/kafka/</id>
    <published>2020-01-19T08:07:27.000Z</published>
    <updated>2020-04-09T05:17:13.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kafka应用场景"><a href="#kafka应用场景" class="headerlink" title="kafka应用场景"></a>kafka应用场景</h2><p>kafka是分布式消息系统，具有高吞吐量，可容错的发布-订阅消息系统。</p><p>应用场景:</p><ul><li><p>用户活动追踪</p></li><li><p>日志聚合</p></li><li><p>限流削峰</p></li></ul><p>高吞吐率实现：</p><ul><li>顺序读写</li><li>零拷贝</li><li>批量发送</li><li>消息压缩</li></ul><h2 id="kafka基本概念"><a href="#kafka基本概念" class="headerlink" title="kafka基本概念"></a>kafka基本概念</h2><ul><li><p><strong>Topic</strong>，相当于消息的一个主题，标签</p></li><li><p><strong>Partition</strong>，一个topic可以有多个partition，一个partition对应系统上的一个到多个目录。一个topic的partition数量应该是broker的整数倍。 </p></li><li><p><strong>segment</strong>，一个partition有多个segment组成，每个segment文件大小相等</p><p>文件由.log 和 .index文件组成，.index是存放.log文件中消息的索引</p><p>查看log文件：</p><p>bin/kafka-run-class.sh kafka.tools.DumpLogSegments –files /tmp/kafka-logs-3/test-0/00000000000000000000.log –print-data-log </p></li><li><p><strong>broker</strong>，kafka集群中的每个节点称为一个broker</p></li><li><p><strong>producer</strong>，消息的生产者</p></li><li><p><strong>consumer</strong>，消息的消费者，</p><ul><li><p>一个消费者可以消费多个topic的消息，</p></li><li><p>一个消费者可以消费一个topic的多个partition的消息</p></li><li><p>一个partition允许多个消费者同时消费</p></li></ul></li><li><p><strong>consumer group</strong>，消费者组，kafka保证一个消息只会被一个组中的某一个kafka消费。</p></li><li><p><strong>replicas of partition</strong>, 分区副本，为了防止消息丢失而创建的分区的备份。</p></li><li><p><strong>partition leader</strong>，每个partition有多个副本，而读写操作只能发生在leader上</p></li><li><p><strong>partition follower</strong>，所有follower都需要从leader同步消息,Leader与follower是主备关系，而非主从关系。</p></li><li><p><strong>ISR</strong>， In-Sync-Replicas,是指副本同步列表</p><ul><li><p><strong>AR</strong>，Assigned Replicas,在最初没有leader时，ISR=AR</p></li><li><p><strong>OSR</strong>，Outof-Sync-Replicas</p></li><li><p><strong>AR</strong> = ISR + OSR + Leader，ISR是存放在zk中的</p></li></ul></li><li><p><strong>offset</strong>,每条消息都有一个当前Partition下唯一的64字节的offset</p></li><li><p><strong>broker controller</strong>， kafka集群中有一个broker会被选举出来，作为controller，负责管理整个集群的partition和replicas的状态</p><p>只有broker controller会向zookeeper中注册watcher</p></li><li><p><strong>脑裂：（Brain Split）</strong>，由于某种原因导致高可用集群中出现了两个master。zk的watcher机制及分布式锁会引发master的假死，从而导致脑裂。</p></li><li><p><strong>HW（High Water-Mark）与 LEO（Log End Offset）</strong></p><ul><li><p>HW 是kafka消费者可以消费到的最高partition的偏移量，HW保证了kafka集群中消息的一致性。</p></li><li><p>LEO 是日志消息最后的偏移量</p></li><li><p>对于partition leader中新写入的消息，是不能立即被消费者消费的，只有当ISR中所有的partition follower消费之后，更新HW，写入ISR，此时消息才能被消费者消费。HW的更新速度取决于那个性能最差的broker</p></li></ul></li><li><p><strong>zookeeper</strong></p><ul><li><p>zookeeper负则broker controller的选举</p><ul><li>partition leader是由 broker controller负责选举的</li></ul></li></ul></li><li><p><strong>Coordinator</strong></p><p>coordinator是用来管理消费者组的，是运行在每个broker上的group coordinator进程，主要负则offset的位移管理和rebalance,一个coordinator可以管理多个消费者组 </p></li><li><p><strong>rebalance</strong></p><p>当消费者组中的消费者数量发生变化，或者topic中的partition数量发生变化，会导致partition的重新分配，这个过程叫做Rebalance.</p><p>rebalance可以给系统带来高可用性和伸缩性，但是<strong>在Rebalance期间，消费者是无法读取消息的</strong>，因此要避免不必要的Rebalance</p></li></ul><p>  <strong>引发Rebalance的情形:</strong></p><ul><li>消费者组中添加消费者</li><li>消费者取消订阅，关闭或崩溃</li><li>向一个topic中添加新的partition</li><li>当有broker挂了</li></ul><ul><li><p><strong>offset commit</strong></p><p>消费者从partition中取出一批消息放入buffer中进行消费，在规定的时间内（seession.timeout.ms）消费完消息后，会自动将其消费的commit提交给broker，broker可以判断哪些消息有被消费过，若在规定时间内没有消费完毕，其是不会提交offset的, 可以避免在Rebalance时重复消费。</p></li></ul><p><strong>注:</strong> 从kafka0.9开始，offset保存在brokers中，__consumers-offsets</p><h2 id="kafka工作原理与流程"><a href="#kafka工作原理与流程" class="headerlink" title="kafka工作原理与流程"></a><strong>kafka工作原理与流程</strong></h2><ul><li><p><strong>消息路由</strong>（即写入的消息放入到哪个partition）</p><ul><li><p>若指定了partition,则写入指定的partition</p></li><li><p>若未指定partition，但指定了key，则对key取hash然后对partition个数取余</p></li><li><p>partition和key均为指定，则根据轮询算法选出一个partition</p></li></ul></li><li><p><strong>消息写入算法</strong>（即消息写入的过程）</p><ol><li><p>producer从zookeeper中获取partition的leader</p></li><li><p>producer将消息发送给leader</p></li><li><p>leader将消息写入到本地log</p></li><li><p>ISR中的follower从leader中pull消息，写入本地log后向leader发送ack</p></li><li><p>leader收到所有follower的ack后，增加HW并向producer发送ACK</p></li></ol></li><li><p><strong>HW截断机制</strong></p><p>HW截断机制保证了partition的leader宕机之后，leader与follower之间的数据不一致。</p><p>两种情况：</p><ul><li>当leader宕机之后，选举出一个新的leader，为了防止leader和follower的数据不一致，此时所有的FOLLOWER都要将数据截断到HW位置, 然后再同步新leader中的数据</li><li>当leader从宕机中恢复后，发现新的leader中和自己的数据不一致，此时宕机的leader会将数据截断到宕机之前的HW位置，然后同步新的leader中的数据</li></ul></li></ul><ul><li><p><strong>消息发送的可靠性机制</strong></p><p>producer向kafka发送消息时，可以选择需要的可靠性级别，通过request.required.acks参数的值进行设置</p><ul><li><p>0值（异步发送）</p><p>不需要kafka反馈成功ack，效率最高，可靠性最低，因为消息可能会丢失。消息丢失的情况：</p><ul><li><p>在传输途中丢失，网络原因</p></li><li><p>在broker中丢失，消息发到broker时是先放入到buffer，当broker的buffer满足将消息写入到partition时（容量到，时间到，或数量到）</p></li><li><p>在buffer正要写入到partition但还未写入时，新的消息又来了，可能丢失。</p></li><li><p>顺序与生产顺序不一致（网络原因）</p></li></ul></li><li><p>1值（同步发送）</p><p>消息发送成功后，立即向生产者返回ack(未等待ISR中的follower同步消息)</p><p>当leader收到新的消息后还未同步，leader宕机，新选举出的leader是不知道该信息存在的，造成消息的丢失。</p></li><li><p>-1值（同步发送）</p><p>leader收到消息，并向ISR列表中的所有FOLLOWER都同步了消息之后再向producer返回ack.</p><p>该模式消息几乎不会丢失，但有可能出现消息重复接收的情况。</p></li></ul></li></ul><ul><li><strong>消费者消费过程解析</strong><ul><li>消费者消费订阅的topic, broker controller会为消费者指定消息的partition，并将partition的offset发送给消费者</li><li>当有生产者向该partition中生产消息时，broker会将消息推送给消费者</li><li>消费者收到推送，消费该消息</li><li>消费者消费完该消息，向broker发送消费成功反馈</li><li>broker收到消费者反馈，更新partition中的offset</li></ul></li></ul><ul><li><p><strong>partition的leader选举范围</strong></p><p>partition的leader宕机后，broker controller从ISR中选举一个FOLLOWER成为新的leader，但若ISR中所有的FOLLOWER都宕机了, 则可以通过<strong>unclean.leader.election.enable</strong>的取值来设置leader的选举范围</p></li><li><p><strong>unclean.leader.election.enable</strong></p><ul><li><p>false</p><p>必须等到副本中有FOLLOWER活过来再进行新的选举，可靠性有保证，但可用性低。</p></li><li><p>true</p><p>选择任何一个没有宕机的FOLLOWER，但该FOLLOWER可能不在ISR中（OSR）。</p></li></ul></li></ul><ul><li><p><strong>重复消费及解决方案</strong></p><ul><li><p>同一个consumer重复消费</p><p>有一个消费的超时时间，auto.commit.interval.ms，在该时间内没有消费完消息，此时consumer会向broker提交一个异常，但是由于没有消费完，</p><p>所以没有向partition提交offset，所以再次消费时还是消费的同样的消息。</p></li><li><p>不同的consumer重复消费</p><p>当consumer消费了某条消息后，提交了offset，但是由于网络等原因，没有在session.timeout.ms中将该offset发送给broker，broker认为该consumer宕机，然后rebalnce,这个partition又被分配给了其他消费者，由于该partition的offset没有被修改，所以会再次被消费</p></li></ul></li></ul><p>​        <strong>解决方案</strong></p><p>​            增加auto.commit.interval.ms</p><p>​            设置enable.auto.commit为false，将kafka自动提交offset该为手动提交</p><p>​            手动提交分为：<strong>同步提交</strong>，<strong>异步提交</strong>，<strong>同异步联合提交</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SyncAsyncManualConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"KafkaConsumerTest"</span>, <span class="keyword">false</span>);</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        String brokers = <span class="string">"kafkaOS1:9092,kafkaOS2:9092,kafkaOS3:9092"</span>;</span><br><span class="line">        properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, brokers);</span><br><span class="line">        properties.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">"cityGro11"</span>);</span><br><span class="line">        properties.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, <span class="string">"false"</span>);</span><br><span class="line">        <span class="comment">// properties.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, "1000");</span></span><br><span class="line">        <span class="comment">// 设置一次提交的offset个数</span></span><br><span class="line">        properties.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, <span class="number">10</span>);</span><br><span class="line">        properties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, <span class="string">"earliest"</span>);</span><br><span class="line">        properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,</span><br><span class="line">                <span class="string">"org.apache.kafka.common.serialization.IntegerDeserializer"</span>);</span><br><span class="line">        properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,</span><br><span class="line">               <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        <span class="keyword">this</span>.consumer = <span class="keyword">new</span> KafkaConsumer&lt;Integer, String&gt;(properties);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 指定要消费的主题</span></span><br><span class="line">  consumer.subscribe(Collections.singletonList(<span class="string">"cities"</span>));</span><br><span class="line">  ConsumerRecords&lt;Integer, String&gt; records = consumer.poll(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">for</span>(ConsumerRecord record : records) &#123;</span><br><span class="line">    System.out.print(<span class="string">"topic = "</span> + record.topic());</span><br><span class="line">    System.out.print(<span class="string">" partition = "</span> + record.partition());</span><br><span class="line">    System.out.print(<span class="string">" key = "</span> + record.key());</span><br><span class="line">    System.out.println(<span class="string">" value = "</span> + record.value());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 带回调功能的手动异步提交</span></span><br><span class="line">      consumer.commitAsync((offsets, e) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">          System.out.print(<span class="string">"提交失败，offsets = "</span> + offsets);</span><br><span class="line">          System.out.println(<span class="string">"，exception = "</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="comment">// 同步提交</span></span><br><span class="line">      consumer.commitSync();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="kafka如何保证数据不丢失"><a href="#kafka如何保证数据不丢失" class="headerlink" title="kafka如何保证数据不丢失"></a><strong>kafka如何保证数据不丢失</strong></h2><ul><li><p>生产者数据的不丢失</p><ul><li><p>同步模式</p><p>​    request.required.acks = 1(follower 未同步数据)/-1(follower同步完数据,但效率低)</p></li><li><p>异步模式</p><p>通过设置时间阈值和消息数量阈值, 并且设置为阻塞模式</p><p>producer.type=async </p><p>request.required.acks=1 </p><p>queue.buffering.max.ms=5000 </p><p>queue.buffering.max.messages=10000 </p><p>queue.enqueue.timeout.ms = -1 </p><p>batch.num.messages=200</p></li></ul></li><li><p>消费者的数据不丢失</p><p>通过offset commit 来保证数据的不丢失，kafka自己记录了每次消费的offset数值，下次继续消费的时候，接着上次的offset进行消费即可</p></li></ul><h2 id="kafka性能到底好在哪儿"><a href="#kafka性能到底好在哪儿" class="headerlink" title="kafka性能到底好在哪儿"></a>kafka性能到底好在哪儿</h2><ul><li><p>采用<strong>BIO</strong>, 虽AIO性能更好, 但是编程难度较大</p></li><li><p>高性能的网络设计</p></li><li><p>顺序写</p><p> 客户端写数据—-&gt; 操作系统缓存 —-&gt; 写入磁盘(<strong>顺序写</strong>), 如果磁盘的个数和转数跟得上的话, 都快赶上写内存的速度了.</p></li><li><p>跳表, 稀松索引, 零拷贝</p></li></ul><h2 id="持续更新-注"><a href="#持续更新-注" class="headerlink" title="持续更新(注)"></a>持续更新(注)</h2><p>该篇blog并不代表该知识点的所有内容, 在今后的工作学习中, <strong><font color="#dd0000">持续更新</font></strong>! 如对blog中的观点有异议/建议,请发送email至: <span class="exturl" data-url="bWFpbHRvOnNoY2hhb3NodWFpQGZveG1haWwuY29t" title="mailto:shchaoshuai@foxmail.com">shchaoshuai@foxmail.com<i class="fa fa-external-link"></i></span>, 感谢您的阅读.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;kafka应用场景&quot;&gt;&lt;a href=&quot;#kafka应用场景&quot; class=&quot;headerlink&quot; title=&quot;kafka应用场景&quot;&gt;&lt;/a&gt;kafka应用场景&lt;/h2&gt;&lt;p&gt;kafka是分布式消息系统，具有高吞吐量，可容错的发布-订阅消息系统。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
    
      <category term="kafka, 分布式, MQ" scheme="http://yoursite.com/tags/kafka-%E5%88%86%E5%B8%83%E5%BC%8F-MQ/"/>
    
  </entry>
  
  <entry>
    <title>rabbitMQ</title>
    <link href="http://yoursite.com/2020/01/16/rabbitMQ/"/>
    <id>http://yoursite.com/2020/01/16/rabbitMQ/</id>
    <published>2020-01-16T08:53:13.000Z</published>
    <updated>2020-01-19T08:01:05.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rabbitMQ简介"><a href="#rabbitMQ简介" class="headerlink" title="rabbitMQ简介"></a>rabbitMQ简介</h2><ul><li><p>按照官网的说法, rabbitMQ就像是一个邮局. 由Post Box, Post office, Post man组成</p></li><li><p>控制管理台: <span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDoxNTY3Mi8=" title="http://localhost:15672/">http://localhost:15672/<i class="fa fa-external-link"></i></span></p></li><li><p>4种交换机: <strong>Fanout</strong> Exchange, <strong>Direct</strong> Exchange, <strong>Topic</strong> Exchange, <strong>Headers</strong> Exchange</p></li></ul><h2 id="图解rabbitMQ"><a href="#图解rabbitMQ" class="headerlink" title="图解rabbitMQ"></a>图解rabbitMQ</h2><p>Message has a routing key and queue has binded a routing key, if they are matched by the rules then the message will be sent to this queue.</p><p><img src="/2020/01/16/rabbitMQ/RabbitMQ.png" alt="图解rabbit MQ"></p><h2 id="持续更新-注"><a href="#持续更新-注" class="headerlink" title="持续更新(注)"></a>持续更新(注)</h2><p>该篇blog并不代表该知识点的所有内容, 在今后的工作学习中, <strong><font color="#dd0000">持续更新</font></strong>! 如对blog中的观点有异议/建议,请发送email至: <span class="exturl" data-url="bWFpbHRvOnNoY2hhb3NodWFpQGZveG1haWwuY29t" title="mailto:shchaoshuai@foxmail.com">shchaoshuai@foxmail.com<i class="fa fa-external-link"></i></span>, 感谢您的阅读.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;rabbitMQ简介&quot;&gt;&lt;a href=&quot;#rabbitMQ简介&quot; class=&quot;headerlink&quot; title=&quot;rabbitMQ简介&quot;&gt;&lt;/a&gt;rabbitMQ简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;按照官网的说法, rabbitMQ就像是一个邮局. 由Po
      
    
    </summary>
    
    
    
      <category term="MQ, 分布式, 消息队列" scheme="http://yoursite.com/tags/MQ-%E5%88%86%E5%B8%83%E5%BC%8F-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>消息队列</title>
    <link href="http://yoursite.com/2020/01/15/MessageQueue/"/>
    <id>http://yoursite.com/2020/01/15/MessageQueue/</id>
    <published>2020-01-15T07:40:20.000Z</published>
    <updated>2020-03-25T02:58:46.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列"></a>为什么使用消息队列</h2><h3 id="解耦"><a href="#解耦" class="headerlink" title="解耦"></a>解耦</h3><p>​    譬如签到送积分, 签到和送积分是两个操作. 签到产生了很重要的数据, 它可以把该消息发送到MQ. 然后积分系统需要该数据, 从MQ中直接获取即可. 这样签到系统就做到了和积分系统解耦. 不必担心积分系统挂了怎么办, 是不是需要重试等. 这些都可以在积分系统内部自己实现. 再者, 如果以后另外一套系统也需要该签到数据, 直接从MQ中获取即可, 实际上与签到系统已无关系.</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>​    当做到解耦后, 实际异步就是自然而然的事情. 如果签到只需要1ms, 而送积分, 或者其他操作需要500ms, 那不可能等所有操作完成之后再去返回数据给用户. 这样就做到了异步.</p><h3 id="削峰"><a href="#削峰" class="headerlink" title="削峰"></a>削峰</h3><p>​    削峰是指当并发访问高峰期, 通过MQ达到限流的目的, 从而减少对数据库MySQL的压力.</p><h2 id="消息队列有什么优点和缺点"><a href="#消息队列有什么优点和缺点" class="headerlink" title="消息队列有什么优点和缺点"></a>消息队列有什么优点和缺点</h2><p><strong>优点</strong>就是第一点所提到的<strong>解耦</strong>, <strong>异步</strong>, <strong>削峰</strong></p><p>缺点: </p><ul><li><p>系统可用性降低(当然有办法保证高可用), 相对而言</p></li><li><p>系统复杂度提高(这是引入新技术之后的必然结果), 因为随之而来的问题就是该技术本身的问题: 如何保证消息没有重复消费, 如何保证消息不丢失, 如何保证消息的顺序性等等</p></li><li><p>数据一致性问题(也可以归为系统复杂度提高的问题), 可以解决</p></li><li><p>如何保证消息的高可用</p></li><li><p>消息传递路径更长, 延时会增加</p></li><li><p>上游无法知道下游的执行结果(很致命)</p></li></ul><h2 id="MQ适合使用的场景"><a href="#MQ适合使用的场景" class="headerlink" title="MQ适合使用的场景"></a>MQ适合使用的场景</h2><ul><li><p>数据驱动的任务依赖. 如晚上执行的定时任务, task1, task2, task3, task2依赖task1, task3依赖task2</p></li><li><p>上游不关心执行结果. 如签到送积分, 修改/添加/删除数据要添加审计日志</p></li><li><p>上游关注执行结果,但执行时间很长. 如通过支付宝转账, 第三方把转账结果通过网关放入MQ, MQ再来通知用户 </p></li></ul><h2 id="MQ不适合使用场景"><a href="#MQ不适合使用场景" class="headerlink" title="MQ不适合使用场景"></a>MQ不适合使用场景</h2><p>上游需要依赖下游的执行结果, 如登录, 不能把登录成功的消息放入MQ</p><h2 id="各种MQ如何选择"><a href="#各种MQ如何选择" class="headerlink" title="各种MQ如何选择"></a>各种MQ如何选择</h2><ul><li><p>社区活跃度,: RabbitMQ和kafka &gt; rocketMQ(阿里) &gt; ActiveMQ</p></li><li><p>性能: kafka, rocketMQ &gt; RabbitMQ &gt; ActiveMQ</p></li><li><p>功能完善性: rocketMQ, rabbitMQ, activeMQ &gt; kafka</p></li></ul><p>所以中小公司, 没有自主研发能力的选择RabbitMQ, </p><p>如果大数据公司做实时计算, 日志采集建议用kafka</p><p>大公司可以使用rocketMQ, 因为用Java开发, 有问题自己可修改</p><h2 id="如何保证消息不被重复消费-消费的幂等性"><a href="#如何保证消息不被重复消费-消费的幂等性" class="headerlink" title="如何保证消息不被重复消费(消费的幂等性)"></a>如何保证消息不被重复消费(消费的幂等性)</h2><p><strong>重复消费的场景:</strong></p><ul><li>同一个消费者重复消费</li></ul><p>指定时间内未消费完, 没有提交offset, 下次消费时重复消费</p><ul><li>不同的消费者重复消费</li></ul><p>consumer消费完之后, 没有提交offset或者未提交成功offset, consumer挂了, 该消息被分配给了其他consumer, 导致重复消费</p><p><strong>问题解决:</strong></p><ul><li><p>设置超时时间</p></li><li><p>关闭自动提交, 改为手动提交, 提交之前检测数据库中是否有该消费过的数据</p></li></ul><h2 id="如何保证消息的可靠性传输-消息丢失问题"><a href="#如何保证消息的可靠性传输-消息丢失问题" class="headerlink" title="如何保证消息的可靠性传输(消息丢失问题)"></a>如何保证消息的可靠性传输(消息丢失问题)</h2><p><strong>消息丢失场景:</strong></p><ul><li><p>生产者丢失数据</p></li><li><p>MQ丢失数据</p></li><li><p>消费者丢失数据</p></li></ul><p><strong>问题解决:</strong></p><ul><li><p>生产者要等MQ返回ack之后才认为该消息发送成功*<em>, *</em>否则重试.(异步发送ack或nack信号, 不用等待)</p></li><li><p>RabbitMQ是通过持久化和confirm机制(即生产者要等MQ返回ack); </p><p>kafaka通过设置参数:</p><p>replication.factor 参数: 这个值必须大于 1，要求每个 partition 必须有至少 2 个副本</p><p>min.insync.replicas 参数: 这个值必须大于 1，这个是要求一个 leader 至少感知到有至少一个 follower 还跟自己保持联系，没掉队，这样才能确保 leader 挂了还有一个 follower</p><p>acks=all: 这个是要求每条数据，必须是写入所有 replica 之后，才能认为是写成功了</p><p>retries=MAX（很大很大很大的一个值，无限次重试的意思): 这个是要求一旦写入失败，就无限重试</p></li><li><p>rabbitMQ和kafka关闭自动ack, 改为手动ack, 如果该消费者未提交ack, 那么MQ会分配其他消费者消费该消息;</p></li></ul><h2 id="如何保证消息的顺序性"><a href="#如何保证消息的顺序性" class="headerlink" title="如何保证消息的顺序性"></a>如何保证消息的顺序性</h2><p><strong>场景:</strong> 如现在需要做一个mysql binlog的同步系统, 如果原始顺序是create, update, delete, 如果是无序的就有可能变成delete, create, update, 这样就出错了.</p><p>RabbitMQ场景: 生产者放入顺序是data1, data2, data3, 因为有多个消费者, 所以有可能顺序会乱</p><p>kafka场景: 生产者放入data1, data2, data3,生产者指定key,可以让这3条数据放入一个partition,一个partition是由一个消费者来消费的, 但是消费者端肯定会起多个线程来消费消息, 多个线程并发, 顺序就可能乱掉了.</p><p><strong>解决:</strong></p><p>实际上所有的顺序一致性都是: 生产者  —&gt;  MQ server   —&gt; 消费者, 只要消息在生产者, MQ server和消费者中间是顺序一致的, 就能保证消息的顺序一致. 保证生产者消息放入MQ server中的时候, 相同key的数据只放入一个queue(或partition), 然后消费的时候由一个消费者来消费, 就能保证消息的顺序一致. 譬如下单, 扣款, 发货, 这三个消息, 只要保证同一个订单内部的一致性就可以. 不同订单没有因果关系, 所以可以不用保证不同订单之间的顺序一致.</p><h2 id="如何保证MQ的高可用"><a href="#如何保证MQ的高可用" class="headerlink" title="如何保证MQ的高可用"></a><strong>如何保证MQ的高可用</strong></h2><ul><li><p>rabbitMQ 通过镜像集群模式. 即创建的queue, 无论是元数据还是queue里的消息, 都会存在于多个实例上. 就是说每个rabbitMQ节点都有这个queue的一个完整镜像.包含queue的全部数据, 每次写消息到queue的时候, 都会自动把消息同步到多个queue上.</p></li><li><p>kafka天然的分布式消息队列, kafka集群由多个broker组成, 一个topic可以有多个partition, 每个partition存在于不同的broker上. 每个broker上只存partition的一部分数据. 每个partition都会有副本存在于其他broker上, 这样即使有broker宕机, 也可以重新选举出一个partition作为leader, 继续支持读写.</p></li></ul><h2 id="如何处理消息的延时以及过期失效问题"><a href="#如何处理消息的延时以及过期失效问题" class="headerlink" title="如何处理消息的延时以及过期失效问题"></a><strong>如何处理消息的延时以及过期失效问题</strong></h2><p>​    因为MQ,如rabbitMQ有ttl, 如果数据积压, 超过TTL时间不处理, 会直接丢掉.</p><p>​    这时候, 只能把这些数据进行批量重导, 重新灌入mq里面</p><h2 id="消息队列满了怎么处理"><a href="#消息队列满了怎么处理" class="headerlink" title="消息队列满了怎么处理"></a><strong>消息队列满了怎么处理</strong></h2><p>临时写个程序, 不做耗时操作, 操作一条废弃一条. 到系统并发量小的时候,譬如晚上12点的时候, 再做批量重导.</p><h2 id="有百万条消息积压几小时-怎么处理"><a href="#有百万条消息积压几小时-怎么处理" class="headerlink" title="有百万条消息积压几小时,怎么处理"></a>有百万条消息积压几小时,怎么处理</h2><p><strong>场景:</strong> MQ里积压了上千万条数据</p><p><strong>解决:</strong> </p><ol><li><p>查清楚是什么原因导致消息积压: consumer程序bug; consumer的消费速度落后于producer的生产速度;</p></li><li><p>如果仅是consumer的的消费速度落后于生产速度的话, 考虑扩容即可</p></li><li><p>若是consumer故障, 修复consumer, 并将其停掉</p></li><li><p>重新创建一个容量大的topic, 比如partition是原来的10倍</p></li><li><p>编写一个新的consumer, 消费原来积压的队列, 该consumer不做任何耗时的操作,将消息均匀的写入新创建的队列里</p></li><li><p>将修复好的consumer部署到原来10倍机器上消费队列</p></li><li><p>消息积压解决后, 恢复原有架构</p></li></ol><h2 id="如何自己设计一个消息队列"><a href="#如何自己设计一个消息队列" class="headerlink" title="如何自己设计一个消息队列"></a>如何自己设计一个消息队列</h2><p>首先要理解kafka的原理</p><ul><li><p>broker –&gt; topic –&gt; partition, 如果资源不够用了, 就给topic增加partition, 提高吞吐量</p></li><li><p>mq要顺序落盘</p></li><li><p>高可用partition 副本, leader, broker</p></li><li><p>解决数据0丢失</p></li></ul><h2 id="持续更新-注"><a href="#持续更新-注" class="headerlink" title="持续更新(注)"></a>持续更新(注)</h2><p>该篇blog并不代表该知识点的所有内容, 在今后的工作学习中, <strong><font color="#dd0000">持续更新</font></strong>! 如对blog中的观点有异议/建议,请发送email至: <span class="exturl" data-url="bWFpbHRvOnNoY2hhb3NodWFpQGZveG1haWwuY29t" title="mailto:shchaoshuai@foxmail.com">shchaoshuai@foxmail.com<i class="fa fa-external-link"></i></span>, 感谢您的阅读.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么使用消息队列&quot;&gt;&lt;a href=&quot;#为什么使用消息队列&quot; class=&quot;headerlink&quot; title=&quot;为什么使用消息队列&quot;&gt;&lt;/a&gt;为什么使用消息队列&lt;/h2&gt;&lt;h3 id=&quot;解耦&quot;&gt;&lt;a href=&quot;#解耦&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
      <category term="MQ, 消息队列, 分布式" scheme="http://yoursite.com/tags/MQ-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务</title>
    <link href="http://yoursite.com/2020/01/14/DistributeTransaction/"/>
    <id>http://yoursite.com/2020/01/14/DistributeTransaction/</id>
    <published>2020-01-14T06:00:03.000Z</published>
    <updated>2020-04-08T08:00:29.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是分布式事务？"><a href="#什么是分布式事务？" class="headerlink" title="什么是分布式事务？"></a>什么是分布式事务？</h2><p>简单的说，就是一次大操作由不同小操作组成，这些小操作分布在不同服务器上，分布式事务需要保证这些小操作要么全部成功，要么全部失败.</p><h2 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a><strong>两阶段提交</strong></h2><p>两阶段提交简称2PC(two phase commitment)</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>TM(Transaction Manager) 事务管理器</li><li>RM(Resource Manager) 资源管理器</li></ul><h3 id="两阶段提交-1"><a href="#两阶段提交-1" class="headerlink" title="两阶段提交:"></a>两阶段提交:</h3><ul><li><p>在第一阶段, 资源管理器向事务管理器汇报各自事务的状态;</p></li><li><p>在第二阶段, 事务管理器根据资源管理器汇报的状态来来确定是回滚还是提交;</p></li></ul><p><strong><font color="#dd0000">注: 两阶段提交方案锁定资源时间长，对性能影响很大，基本不适合解决微服务事务问题.</font></strong></p><p>​      <strong><font color="#dd0000">两阶段提交协议是基于XA规范, 阻塞, 属于刚性事务</font></strong></p><p>​    数据库实现(XA, MySQL和Oracle都支持)</p><p>​    xa_start, xa_end, xa_prepare, xa_commit, xa_rollback</p><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a><strong>TCC</strong></h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>​    TCC(Try Confirm Cancel), 是2PC的一种改进</p><p>​    事务开始时，业务应用会向事务协调器注册启动事务。之后业务应用会调用所有服务的try接口，完成一阶段准备。之后事务协调器会根据try接口返回情况，决定调用confirm接口或者cancel接口。如果接口调用失败，会进行重试。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>TCC方案让应用自己定义数据库操作的粒度，使得降低锁冲突、提高吞吐量成为可能。 当然TCC方案也有不足之处，集中表现在以下两个方面：</p><ul><li><p>对应用的侵入性强。业务逻辑的每个分支都需要实现try、confirm、cancel三个操作，应用侵入性较强，改造成本高。</p></li><li><p>实现难度较大。需要按照网络状态、系统故障等不同的失败原因实现不同的回滚策略。为了满足一致性的要求，confirm和cancel接口必须实现幂等。</p></li></ul><h2 id="基于消息的最终一致性方案"><a href="#基于消息的最终一致性方案" class="headerlink" title="基于消息的最终一致性方案"></a><strong>基于消息的最终一致性方案</strong></h2><p>消息一致性方案是通过消息中间件保证上、下游应用数据操作的一致性。基本思路是将本地操作和发送消息放在一个事务中，保证本地操作和消息发送要么两者都成功或者都失败。下游应用向消息系统订阅该消息，收到消息后执行相应操作。</p><p>消息方案从本质上讲是将分布式事务转换为两个本地事务，然后依靠下游业务的重试机制达到最终一致性。基于消息的最终一致性方案对应用侵入性也很高，应用需要进行大量业务改造，成本较高。</p><h2 id="阿里的GTS"><a href="#阿里的GTS" class="headerlink" title="阿里的GTS"></a><strong>阿里的GTS</strong></h2><p>Fescar（Fast &amp; EaSy Commit And Rollback), 升级后为: Seata(Simple Extensible Autonomous Transaction Architecture) </p><h3 id="seata-工作原理"><a href="#seata-工作原理" class="headerlink" title="seata 工作原理"></a>seata 工作原理</h3><p>下面是来自于<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NlYXRhL3NlYXRh" title="https://github.com/seata/seata">seata<i class="fa fa-external-link"></i></span>的工作原理图</p><p><img src="/2020/01/14/DistributeTransaction/seata-procedure.png" alt="seata flow chart"></p><ul><li><strong>Transaction Coordinator(TC):</strong> 用来协调全局事务和各个分支事务的状态, 驱动全局事务和各个分支事务的回滚或提交</li><li><strong>Transaction Manager(TM):</strong> 定义了事务的范围(一般是业务层), 用来<strong>开启/提交/回滚</strong>一个整体事务</li><li><strong>Resource Manager(RM):</strong> 管理分支事务, 与TC进行协调注册分支事务并且汇报分支事务的状态, 驱动分支事务的提交或回滚</li></ul><h3 id="seata管理分布式事务的生命周期"><a href="#seata管理分布式事务的生命周期" class="headerlink" title="seata管理分布式事务的生命周期"></a>seata管理分布式事务的生命周期</h3><ol><li>TM向TC请求开启一个新的全局事务, TC生成一个代表该全局事务的XID</li><li>XID在整个microservice的整个调用链中都可见</li><li>RM把本地事务向TC注册为XID全局事务的一个分支</li><li>TM向TC请求XID全局事务的提交或回滚</li><li>TC驱动所有XID全局事务的提交或回滚</li></ol><h2 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a><strong>数据一致性</strong></h2><h3 id="数据不一致产生的原因"><a href="#数据不一致产生的原因" class="headerlink" title="数据不一致产生的原因"></a>数据不一致产生的原因</h3><ul><li><p>不同的DB(用户有UserDB, 商品有Product DB)</p></li><li><p>DB和缓存(商品有Product DB 和 Product Cache)</p></li></ul><p>问题1: 如果把下单操作和把下单消息放到MQ的操作放到一个try-catch块中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 下单</span></span><br><span class="line">  orderService.createOrder();</span><br><span class="line">  <span class="comment">// 发送消息到MQ</span></span><br><span class="line">  msgClient.sendMsg(orderId);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送消息是网络操作, 网络操作一般会有3中结果: success, fail, timeout. Success 和 fail都相对好处理, 但是<strong>timeout</strong>是不知道消息发送成功还是失败的.所以这种操作是<strong>不合理</strong>的. </p><p><strong>解决方法: 一般会先把下单成功的消息放入DB中, 然后从DB中取数据放入MQ</strong></p><p><strong>分布式缓存和数据库的一致性4步骤:</strong></p><ul><li><p>先更新数据库, 然后delete缓存</p></li><li><p>延时双删</p></li><li><p>设置缓存失效时间</p></li><li><p>记录日志, 脚本定期修正</p></li></ul><h2 id="柔性分布式事务-saga"><a href="#柔性分布式事务-saga" class="headerlink" title="柔性分布式事务(saga)"></a>柔性分布式事务(saga)</h2><p>Saga模式是现实中可行的方案，采用事务补偿机制。每个本地事务都存储一个副本，如果出现失败，则利用补偿机制回滚。</p><p>TCC模型和saga模型</p><p>TCC(Try, Confirm, Cancel), 以A向B账户转账为例, 分为汇款服务和收款服务</p><h3 id="saga-汇款服务"><a href="#saga-汇款服务" class="headerlink" title="saga-汇款服务:"></a><strong>saga-汇款服务:</strong></h3><ul><li><p>Try:</p><ol><li><p>检查A账户的有效性, 账户状态,是否冻结等, </p></li><li><p>账户余额是否充足</p></li><li><p>从A账户中扣减500元, 并将状态置为转账中</p></li><li><p>预留扣减资源, 将A往B账户转账这个事件存入MQ(或DB)中</p></li></ol></li><li><p>Confirm:</p><p>不做任何操作</p></li><li><p>Cancel:</p><ol><li><p>A账户增加500元</p></li><li><p>从MQ(或DB)中,释放扣减资源</p></li></ol></li></ul><h3 id="saga-收款服务"><a href="#saga-收款服务" class="headerlink" title="saga-收款服务:"></a><strong>saga-收款服务:</strong></h3><ul><li><p>Try:</p><p>检查B账户的有效性</p></li><li><p>Confirm:</p><ol><li><p>读MQ(或DB), B账户增加500元</p></li><li><p>从MQ(或DB)释放扣减资源</p></li></ol></li><li><p>Cancel:</p><p>不做任何操作</p></li></ul><p><strong>saga模型:</strong></p><p>把一个长事务拆分成多个短事务(本地事务), 每个事务都有对应的执行模块和补偿模块(对应TCC中的Confirm 和 Cancel)</p><ul><li><p>当任意一个本地事务出错, 就根据本地事务的补偿方法恢复之前的事务, 达到事务的最终一致性.</p></li><li><p>当最后一个本地事务失败时, 整个事务就失败, 不需要补偿. 所以针对N个本地事务, 只有对应N - 1个事务补偿</p></li></ul><p><strong>saga vs TCC</strong></p><p>​    区别在于TCC多了一个Try(<strong>预操作</strong>), 每次都会预扣减资源. saga虽然也有Try操作, 但是只是做一些检测操作</p><p><strong>saga 时序图</strong></p><p><img src="/2020/01/14/DistributeTransaction/saga-sequence-chart.png" alt="saga sequence chart"></p><p> <strong>TCC时序图</strong></p><p><img src="/2020/01/14/DistributeTransaction/TCC-sequence-chart.png" alt="tcc sequence chart"></p><p><strong><font color="#dd0000">刚性事务vs 柔性事务</font></strong></p><table><thead><tr><th></th><th><strong>刚性事务(XA模型)</strong></th><th><strong>柔性事务</strong></th></tr></thead><tbody><tr><td><strong>实际项目中有无应用场景</strong></td><td><strong>无</strong></td><td><strong>有</strong></td></tr><tr><td><strong>回滚</strong></td><td><strong>支持</strong></td><td><strong>通过补偿支持</strong></td></tr><tr><td><strong>一致性</strong></td><td><strong>强一致性</strong></td><td><strong>最终一致性</strong></td></tr><tr><td><strong>隔离性</strong></td><td><strong>原生支持</strong></td><td><strong>实现资源锁定接口(如信用卡预授权)</strong></td></tr><tr><td><strong>并发性能</strong></td><td><strong>低, 严重衰退(锁定资源时间太久)</strong></td><td><strong>略微衰退</strong></td></tr><tr><td><strong>适合场景</strong></td><td><strong>短事务,并发较低</strong></td><td><strong>长事务, 高并发</strong></td></tr></tbody></table><h2 id="redis做分布式锁的问题"><a href="#redis做分布式锁的问题" class="headerlink" title="redis做分布式锁的问题"></a><strong>redis做分布式锁的问题</strong></h2><p><strong>SET lock_key random_value NX PX 5000</strong></p><ul><li><p><strong>锁没有办法严格保证唯一</strong>, 如使用master-slave模式, 当线程A通过setnx(orderId,…)拿到锁, 执行操作, 此时master挂掉, slave变为master, 原有的锁记录丢失. 线程B这时可以拿到锁, 就出现问题</p></li><li><p><strong>Redis锁存在租约问题</strong>,  如果操作执行时间超过了锁的有效期, 那么线程B同样会拿到锁 </p></li></ul><p><strong>注: redis从本质上说是AP模型, 只保证可用. 如果需要用分布式锁, 必须是CP模型, 需要保证一致性.etcd可以保证.</strong></p><p><img src="/2020/01/14/DistributeTransaction/distribute-transaction-consistent.png" alt="consistent"> </p><h2 id="分布式缓存的高可用"><a href="#分布式缓存的高可用" class="headerlink" title="分布式缓存的高可用"></a><strong>分布式缓存的高可用</strong></h2><p>缓存不可用, 查询数据库,</p><p>做好评估:  缓存宕机, 评估数据库压力</p><h2 id="持续更新-注"><a href="#持续更新-注" class="headerlink" title="持续更新(注)"></a>持续更新(注)</h2><p>该篇blog并不代表该知识点的所有内容, 在今后的工作学习中, <strong><font color="#dd0000">持续更新</font></strong>! 如对blog中的观点有异议/建议,请发送email至: <span class="exturl" data-url="bWFpbHRvOnNoY2hhb3NodWFpQGZveG1haWwuY29t" title="mailto:shchaoshuai@foxmail.com">shchaoshuai@foxmail.com<i class="fa fa-external-link"></i></span>, 感谢您的阅读.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是分布式事务？&quot;&gt;&lt;a href=&quot;#什么是分布式事务？&quot; class=&quot;headerlink&quot; title=&quot;什么是分布式事务？&quot;&gt;&lt;/a&gt;什么是分布式事务？&lt;/h2&gt;&lt;p&gt;简单的说，就是一次大操作由不同小操作组成，这些小操作分布在不同服务器上，分布式事务需
      
    
    </summary>
    
    
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
</feed>
