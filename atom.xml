<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Architect</title>
  
  <subtitle>The steps you take don&#39;t need to be big. They just need to take you in the right direction.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-15T07:16:36.836Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chris Shang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式事务</title>
    <link href="http://yoursite.com/2020/01/14/DistributeTransaction/"/>
    <id>http://yoursite.com/2020/01/14/DistributeTransaction/</id>
    <published>2020-01-14T06:00:03.000Z</published>
    <updated>2020-01-15T07:16:36.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是分布式事务？"><a href="#什么是分布式事务？" class="headerlink" title="什么是分布式事务？"></a>什么是分布式事务？</h2><p>简单的说，就是一次大操作由不同小操作组成，这些小操作分布在不同服务器上，分布式事务需要保证这些小操作要么全部成功，要么全部失败.</p><h2 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a><strong>两阶段提交</strong></h2><p>两阶段提交简称2PC(two phase commitment)</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul><li>TM(Transaction Manager) 事务管理器</li><li>RM(Resource Manager) 资源管理器</li></ul><h3 id="两阶段提交-1"><a href="#两阶段提交-1" class="headerlink" title="两阶段提交:"></a>两阶段提交:</h3><ul><li><p>在第一阶段, 资源管理器向事务管理器汇报各自事务的状态;</p></li><li><p>在第二阶段, 事务管理器根据资源管理器汇报的状态来来确定是回滚还是提交;</p></li></ul><p><strong><font color="#dd0000">注: 两阶段提交方案锁定资源时间长，对性能影响很大，基本不适合解决微服务事务问题.</font></strong></p><p>​      <strong><font color="#dd0000">两阶段提交协议是基于XA规范, 阻塞, 属于刚性事务</font></strong></p><p>​    数据库实现(XA, MySQL和Oracle都支持)</p><p>​    xa_start, xa_end, xa_prepare, xa_commit, xa_rollback</p><h2 id="TCC"><a href="#TCC" class="headerlink" title="TCC"></a><strong>TCC</strong></h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>​    TCC(Try Confirm Cancel), 是2PC的一种改进</p><p>​    事务开始时，业务应用会向事务协调器注册启动事务。之后业务应用会调用所有服务的try接口，完成一阶段准备。之后事务协调器会根据try接口返回情况，决定调用confirm接口或者cancel接口。如果接口调用失败，会进行重试。</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>TCC方案让应用自己定义数据库操作的粒度，使得降低锁冲突、提高吞吐量成为可能。 当然TCC方案也有不足之处，集中表现在以下两个方面：</p><ul><li><p>对应用的侵入性强。业务逻辑的每个分支都需要实现try、confirm、cancel三个操作，应用侵入性较强，改造成本高。</p></li><li><p>实现难度较大。需要按照网络状态、系统故障等不同的失败原因实现不同的回滚策略。为了满足一致性的要求，confirm和cancel接口必须实现幂等。</p></li></ul><h2 id="基于消息的最终一致性方案"><a href="#基于消息的最终一致性方案" class="headerlink" title="基于消息的最终一致性方案"></a><strong>基于消息的最终一致性方案</strong></h2><p>消息一致性方案是通过消息中间件保证上、下游应用数据操作的一致性。基本思路是将本地操作和发送消息放在一个事务中，保证本地操作和消息发送要么两者都成功或者都失败。下游应用向消息系统订阅该消息，收到消息后执行相应操作。</p><p>消息方案从本质上讲是将分布式事务转换为两个本地事务，然后依靠下游业务的重试机制达到最终一致性。基于消息的最终一致性方案对应用侵入性也很高，应用需要进行大量业务改造，成本较高。</p><h2 id="阿里的GTS"><a href="#阿里的GTS" class="headerlink" title="阿里的GTS"></a><strong>阿里的GTS</strong></h2><p>Fescar（Fast &amp; EaSy Commit And Rollback), 升级后为: Seata(Simple Extensible Autonomous Transaction Architecture) </p><h3 id="seata-工作原理"><a href="#seata-工作原理" class="headerlink" title="seata 工作原理"></a>seata 工作原理</h3><p>下面是来自于<a href="https://github.com/seata/seata" target="_blank" rel="noopener">seata</a>的工作原理图</p><p><img src="/2020/01/14/DistributeTransaction/seata-procedure.png" alt="seata flow chart"></p><ul><li><strong>Transaction Coordinator(TC):</strong> 用来协调全局事务和各个分支事务的状态, 驱动全局事务和各个分支事务的回滚或提交</li><li><strong>Transaction Manager(TM):</strong> 定义了事务的范围(一般是业务层), 用来<strong>开启/提交/回滚</strong>一个整体事务</li><li><strong>Resource Manager(RM):</strong> 管理分支事务, 与TC进行协调注册分支事务并且汇报分支事务的状态, 驱动分支事务的提交或回滚</li></ul><h3 id="seata管理分布式事务的生命周期"><a href="#seata管理分布式事务的生命周期" class="headerlink" title="seata管理分布式事务的生命周期"></a>seata管理分布式事务的生命周期</h3><pre><code>1. TM向TC请求开启一个新的全局事务, TC生成一个代表该全局事务的XID 2. XID在整个microservice的整个调用链中都可见 3. RM把本地事务向TC注册为XID全局事务的一个分支 4. TM向TC请求XID全局事务的提交或回滚 5. TC驱动所有XID全局事务的提交或回滚</code></pre><h2 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a><strong>数据一致性</strong></h2><h3 id="数据不一致产生的原因"><a href="#数据不一致产生的原因" class="headerlink" title="数据不一致产生的原因"></a>数据不一致产生的原因</h3><ul><li><p>不同的DB(用户有UserDB, 商品有Product DB)</p></li><li><p>DB和缓存(商品有Product DB 和 Product Cache)</p></li></ul><p>问题1: 如果把下单操作和把下单消息放到MQ的操作放到一个try-catch块中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 下单</span></span><br><span class="line">  orderService.createOrder();</span><br><span class="line">  <span class="comment">// 发送消息到MQ</span></span><br><span class="line">  msgClient.sendMsg(orderId);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送消息是网络操作, 网络操作一般会有3中结果: success, fail, timeout. Success 和 fail都相对好处理, 但是<strong>timeout</strong>是不知道消息发送成功还是失败的.所以这种操作是<strong>不合理</strong>的. </p><p><strong>解决方法: 一般会先把下单成功的消息放入DB中, 然后从DB中取数据放入MQ</strong></p><p><strong>分布式缓存和数据库的一致性4步骤:</strong></p><ul><li><p>先更新数据库, 然后delete缓存</p></li><li><p>延时双删</p></li><li><p>设置缓存失效时间</p></li><li><p>记录日志, 脚本定期修正</p></li></ul><h2 id="柔性分布式事务-saga"><a href="#柔性分布式事务-saga" class="headerlink" title="柔性分布式事务(saga)"></a>柔性分布式事务(saga)</h2><p>Saga模式是现实中可行的方案，采用事务补偿机制。每个本地事务都存储一个副本，如果出现失败，则利用补偿机制回滚。</p><p>TCC模型和saga模型</p><p>TCC(Try, Confirm, Cancel), 以A向B账户转账为例, 分为汇款服务和收款服务</p><h3 id="saga-汇款服务"><a href="#saga-汇款服务" class="headerlink" title="saga-汇款服务:"></a><strong>saga-汇款服务:</strong></h3><ul><li><p>Try:</p><ol><li><p>检查A账户的有效性, 账户状态,是否冻结等, </p></li><li><p>账户余额是否充足</p></li><li><p>从A账户中扣减500元, 并将状态置为转账中</p></li><li><p>预留扣减资源, 将A往B账户转账这个事件存入MQ(或DB)中</p></li></ol></li><li><p>Confirm:</p><p>不做任何操作</p></li><li><p>Cancel:</p><ol><li><p>A账户增加500元</p></li><li><p>从MQ(或DB)中,释放扣减资源</p></li></ol></li></ul><h3 id="saga-收款服务"><a href="#saga-收款服务" class="headerlink" title="saga-收款服务:"></a><strong>saga-收款服务:</strong></h3><ul><li><p>Try:</p><p>检查B账户的有效性</p></li><li><p>Confirm:</p><ol><li><p>读MQ(或DB), B账户增加500元</p></li><li><p>从MQ(或DB)释放扣减资源</p></li></ol></li><li><p>Cancel:</p><p>不做任何操作</p></li></ul><p><strong>saga模型:</strong></p><p>把一个长事务拆分成多个短事务(本地事务), 每个事务都有对应的执行模块和补偿模块(对应TCC中的Confirm 和 Cancel)</p><ul><li><p>当任意一个本地事务出错, 就根据本地事务的补偿方法恢复之前的事务, 达到事务的最终一致性.</p></li><li><p>当最后一个本地事务失败时, 整个事务就失败, 不需要补偿. 所以针对N个本地事务, 只有对应N - 1个事务补偿</p></li></ul><p><strong>saga vs TCC</strong></p><p>​    区别在于TCC多了一个Try(<strong>预操作</strong>), 每次都会预扣减资源. saga虽然也有Try操作, 但是只是做一些检测操作</p><p><strong>saga 时序图</strong></p><p><img src="/2020/01/14/DistributeTransaction/saga-sequence-chart.png" alt="saga sequence chart"></p><p> <strong>TCC时序图</strong></p><p><img src="/2020/01/14/DistributeTransaction/TCC-sequence-chart.png" alt="tcc sequence chart"></p><p><strong><font color="#dd0000">刚性事务vs 柔性事务</font></strong></p><table><thead><tr><th></th><th><strong>刚性事务(XA模型)</strong></th><th><strong>柔性事务</strong></th></tr></thead><tbody><tr><td><strong>实际项目中有无应用场景</strong></td><td><strong>无</strong></td><td><strong>有</strong></td></tr><tr><td><strong>回滚</strong></td><td><strong>支持</strong></td><td><strong>通过补偿支持</strong></td></tr><tr><td><strong>一致性</strong></td><td><strong>强一致性</strong></td><td><strong>最终一致性</strong></td></tr><tr><td><strong>隔离性</strong></td><td><strong>原生支持</strong></td><td><strong>实现资源锁定接口(如信用卡预授权)</strong></td></tr><tr><td><strong>并发性能</strong></td><td><strong>低, 严重衰退(锁定资源时间太久)</strong></td><td><strong>略微衰退</strong></td></tr><tr><td><strong>适合场景</strong></td><td><strong>短事务,并发较低</strong></td><td><strong>长事务, 高并发</strong></td></tr></tbody></table><h2 id="redis做分布式锁的问题"><a href="#redis做分布式锁的问题" class="headerlink" title="redis做分布式锁的问题"></a><strong>redis做分布式锁的问题</strong></h2><p><strong>SET lock_key random_value NX PX 5000</strong></p><ul><li><p><strong>锁没有办法严格保证唯一</strong>, 如使用master-slave模式, 当线程A通过setnx(orderId,…)拿到锁, 执行操作, 此时master挂掉, slave变为master, 原有的锁记录丢失. 线程B这时可以拿到锁, 就出现问题</p></li><li><p><strong>Redis锁存在租约问题</strong>,  如果操作执行时间超过了锁的有效期, 那么线程B同样会拿到锁 </p></li></ul><p><strong>注: redis从本质上说是AP模型, 只保证可用. 如果需要用分布式锁, 必须是CP模型, 需要保证一致性.etcd可以保证.</strong></p><p><img src="/2020/01/14/DistributeTransaction/distribute-transaction-consistent.png" alt="consistent"> </p><h2 id="分布式缓存的高可用"><a href="#分布式缓存的高可用" class="headerlink" title="分布式缓存的高可用"></a><strong>分布式缓存的高可用</strong></h2><p>缓存不可用, 查询数据库,</p><p>做好评估:  缓存宕机, 评估数据库压力</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是分布式事务？&quot;&gt;&lt;a href=&quot;#什么是分布式事务？&quot; class=&quot;headerlink&quot; title=&quot;什么是分布式事务？&quot;&gt;&lt;/a&gt;什么是分布式事务？&lt;/h2&gt;&lt;p&gt;简单的说，就是一次大操作由不同小操作组成，这些小操作分布在不同服务器上，分布式事务需
      
    
    </summary>
    
    
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
</feed>
